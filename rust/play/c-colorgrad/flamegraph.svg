<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (1 samples, 0.19%)</title><rect x="0.0000%" y="549" width="0.1942%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="559.50"></text></g><g><title>[[heap]] (1 samples, 0.19%)</title><rect x="0.1942%" y="549" width="0.1942%" height="15" fill="rgb(217,0,24)"/><text x="0.4442%" y="559.50"></text></g><g><title>__pthread_mutex_lock_full (1 samples, 0.19%)</title><rect x="0.1942%" y="533" width="0.1942%" height="15" fill="rgb(221,193,54)"/><text x="0.4442%" y="543.50"></text></g><g><title>[anon] (1 samples, 0.19%)</title><rect x="0.3883%" y="549" width="0.1942%" height="15" fill="rgb(248,212,6)"/><text x="0.6383%" y="559.50"></text></g><g><title>pa_stream_get_state (1 samples, 0.19%)</title><rect x="0.3883%" y="533" width="0.1942%" height="15" fill="rgb(208,68,35)"/><text x="0.6383%" y="543.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (2 samples, 0.39%)</title><rect x="0.5825%" y="533" width="0.3883%" height="15" fill="rgb(232,128,0)"/><text x="0.8325%" y="543.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.5825%" y="549" width="0.5825%" height="15" fill="rgb(207,160,47)"/><text x="0.8325%" y="559.50"></text></g><g><title>cpal::host::alsa::input_stream_worker (1 samples, 0.19%)</title><rect x="0.9709%" y="533" width="0.1942%" height="15" fill="rgb(228,23,34)"/><text x="1.2209%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.39%)</title><rect x="1.1650%" y="357" width="0.3883%" height="15" fill="rgb(218,30,26)"/><text x="1.4150%" y="367.50"></text></g><g><title>pa_detect_fork (3 samples, 0.58%)</title><rect x="1.5534%" y="341" width="0.5825%" height="15" fill="rgb(220,122,19)"/><text x="1.8034%" y="351.50"></text></g><g><title>__GI___getpid (3 samples, 0.58%)</title><rect x="1.5534%" y="325" width="0.5825%" height="15" fill="rgb(250,228,42)"/><text x="1.8034%" y="335.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="2.1359%" y="325" width="0.1942%" height="15" fill="rgb(240,193,28)"/><text x="2.3859%" y="335.50"></text></g><g><title>pa_mainloop_wakeup (1 samples, 0.19%)</title><rect x="2.1359%" y="309" width="0.1942%" height="15" fill="rgb(216,20,37)"/><text x="2.3859%" y="319.50"></text></g><g><title>pa_write (1 samples, 0.19%)</title><rect x="2.1359%" y="293" width="0.1942%" height="15" fill="rgb(206,188,39)"/><text x="2.3859%" y="303.50"></text></g><g><title>__libc_write (1 samples, 0.19%)</title><rect x="2.1359%" y="277" width="0.1942%" height="15" fill="rgb(217,207,13)"/><text x="2.3859%" y="287.50"></text></g><g><title>[libasound.so.2.0.0] (7 samples, 1.36%)</title><rect x="1.1650%" y="421" width="1.3592%" height="15" fill="rgb(231,73,38)"/><text x="1.4150%" y="431.50"></text></g><g><title>[libasound.so.2.0.0] (7 samples, 1.36%)</title><rect x="1.1650%" y="405" width="1.3592%" height="15" fill="rgb(225,20,46)"/><text x="1.4150%" y="415.50"></text></g><g><title>[libasound.so.2.0.0] (7 samples, 1.36%)</title><rect x="1.1650%" y="389" width="1.3592%" height="15" fill="rgb(210,31,41)"/><text x="1.4150%" y="399.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (7 samples, 1.36%)</title><rect x="1.1650%" y="373" width="1.3592%" height="15" fill="rgb(221,200,47)"/><text x="1.4150%" y="383.50"></text></g><g><title>pa_stream_drop (5 samples, 0.97%)</title><rect x="1.5534%" y="357" width="0.9709%" height="15" fill="rgb(226,26,5)"/><text x="1.8034%" y="367.50"></text></g><g><title>pa_memblock_unref (2 samples, 0.39%)</title><rect x="2.1359%" y="341" width="0.3883%" height="15" fill="rgb(249,33,26)"/><text x="2.3859%" y="351.50"></text></g><g><title>pa_pstream_send_release (1 samples, 0.19%)</title><rect x="2.3301%" y="325" width="0.1942%" height="15" fill="rgb(235,183,28)"/><text x="2.5801%" y="335.50"></text></g><g><title>pa_queue_push (1 samples, 0.19%)</title><rect x="2.3301%" y="309" width="0.1942%" height="15" fill="rgb(221,5,38)"/><text x="2.5801%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="2.5243%" y="421" width="0.1942%" height="15" fill="rgb(247,18,42)"/><text x="2.7743%" y="431.50"></text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::fill (2 samples, 0.39%)</title><rect x="2.7184%" y="405" width="0.3883%" height="15" fill="rgb(241,131,45)"/><text x="2.9684%" y="415.50"></text></g><g><title>snd_pcm_poll_descriptors (2 samples, 0.39%)</title><rect x="2.7184%" y="389" width="0.3883%" height="15" fill="rgb(249,31,29)"/><text x="2.9684%" y="399.50"></text></g><g><title>[libasound.so.2.0.0] (2 samples, 0.39%)</title><rect x="2.7184%" y="373" width="0.3883%" height="15" fill="rgb(225,111,53)"/><text x="2.9684%" y="383.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (27 samples, 5.24%)</title><rect x="3.1068%" y="341" width="5.2427%" height="15" fill="rgb(238,160,17)"/><text x="3.3568%" y="351.50">[libas..</text></g><g><title>pa_stream_readable_size (27 samples, 5.24%)</title><rect x="3.1068%" y="325" width="5.2427%" height="15" fill="rgb(214,148,48)"/><text x="3.3568%" y="335.50">pa_str..</text></g><g><title>pa_detect_fork (27 samples, 5.24%)</title><rect x="3.1068%" y="309" width="5.2427%" height="15" fill="rgb(232,36,49)"/><text x="3.3568%" y="319.50">pa_det..</text></g><g><title>__GI___getpid (27 samples, 5.24%)</title><rect x="3.1068%" y="293" width="5.2427%" height="15" fill="rgb(209,103,24)"/><text x="3.3568%" y="303.50">__GI__..</text></g><g><title>&lt;alsa::pcm::PCM as alsa::poll::Descriptors&gt;::revents (28 samples, 5.44%)</title><rect x="3.1068%" y="405" width="5.4369%" height="15" fill="rgb(229,88,8)"/><text x="3.3568%" y="415.50">&lt;alsa::..</text></g><g><title>snd_pcm_poll_descriptors_revents (28 samples, 5.44%)</title><rect x="3.1068%" y="389" width="5.4369%" height="15" fill="rgb(213,181,19)"/><text x="3.3568%" y="399.50">snd_pcm..</text></g><g><title>[libasound.so.2.0.0] (28 samples, 5.44%)</title><rect x="3.1068%" y="373" width="5.4369%" height="15" fill="rgb(254,191,54)"/><text x="3.3568%" y="383.50">[libaso..</text></g><g><title>[libasound_module_pcm_pulse.so] (28 samples, 5.44%)</title><rect x="3.1068%" y="357" width="5.4369%" height="15" fill="rgb(241,83,37)"/><text x="3.3568%" y="367.50">[libaso..</text></g><g><title>pa_threaded_mainloop_unlock (1 samples, 0.19%)</title><rect x="8.3495%" y="341" width="0.1942%" height="15" fill="rgb(233,36,39)"/><text x="8.5995%" y="351.50"></text></g><g><title>pa_thread_self (1 samples, 0.19%)</title><rect x="8.3495%" y="325" width="0.1942%" height="15" fill="rgb(226,3,54)"/><text x="8.5995%" y="335.50"></text></g><g><title>alsa::pcm::PCM::avail (1 samples, 0.19%)</title><rect x="8.5437%" y="405" width="0.1942%" height="15" fill="rgb(245,192,40)"/><text x="8.7937%" y="415.50"></text></g><g><title>snd_pcm_avail (1 samples, 0.19%)</title><rect x="8.5437%" y="389" width="0.1942%" height="15" fill="rgb(238,167,29)"/><text x="8.7937%" y="399.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="8.5437%" y="373" width="0.1942%" height="15" fill="rgb(232,182,51)"/><text x="8.7937%" y="383.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="8.5437%" y="357" width="0.1942%" height="15" fill="rgb(231,60,39)"/><text x="8.7937%" y="367.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.19%)</title><rect x="8.5437%" y="341" width="0.1942%" height="15" fill="rgb(208,69,12)"/><text x="8.7937%" y="351.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.19%)</title><rect x="8.5437%" y="325" width="0.1942%" height="15" fill="rgb(235,93,37)"/><text x="8.7937%" y="335.50"></text></g><g><title>pa_stream_readable_size (1 samples, 0.19%)</title><rect x="8.5437%" y="309" width="0.1942%" height="15" fill="rgb(213,116,39)"/><text x="8.7937%" y="319.50"></text></g><g><title>pa_detect_fork (1 samples, 0.19%)</title><rect x="8.5437%" y="293" width="0.1942%" height="15" fill="rgb(222,207,29)"/><text x="8.7937%" y="303.50"></text></g><g><title>__GI___getpid (1 samples, 0.19%)</title><rect x="8.5437%" y="277" width="0.1942%" height="15" fill="rgb(206,96,30)"/><text x="8.7937%" y="287.50"></text></g><g><title>cpal::host::alsa::poll_descriptors_and_prepare_buffer (65 samples, 12.62%)</title><rect x="2.7184%" y="421" width="12.6214%" height="15" fill="rgb(218,138,4)"/><text x="2.9684%" y="431.50">cpal::host::alsa::p..</text></g><g><title>alsa::poll::poll (34 samples, 6.60%)</title><rect x="8.7379%" y="405" width="6.6019%" height="15" fill="rgb(250,191,14)"/><text x="8.9879%" y="415.50">alsa::pol..</text></g><g><title>__GI___poll (34 samples, 6.60%)</title><rect x="8.7379%" y="389" width="6.6019%" height="15" fill="rgb(239,60,40)"/><text x="8.9879%" y="399.50">__GI___po..</text></g><g><title>__libc_disable_asynccancel (1 samples, 0.19%)</title><rect x="15.1456%" y="373" width="0.1942%" height="15" fill="rgb(206,27,48)"/><text x="15.3956%" y="383.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.19%)</title><rect x="15.5340%" y="373" width="0.1942%" height="15" fill="rgb(225,35,8)"/><text x="15.7840%" y="383.50"></text></g><g><title>cpal_alsa_in (88 samples, 17.09%)</title><rect x="0.0000%" y="565" width="17.0874%" height="15" fill="rgb(250,213,24)"/><text x="0.2500%" y="575.50">cpal_alsa_in</text></g><g><title>__GI___clone (82 samples, 15.92%)</title><rect x="1.1650%" y="549" width="15.9223%" height="15" fill="rgb(247,123,22)"/><text x="1.4150%" y="559.50">__GI___clone</text></g><g><title>start_thread (82 samples, 15.92%)</title><rect x="1.1650%" y="533" width="15.9223%" height="15" fill="rgb(231,138,38)"/><text x="1.4150%" y="543.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (82 samples, 15.92%)</title><rect x="1.1650%" y="517" width="15.9223%" height="15" fill="rgb(231,145,46)"/><text x="1.4150%" y="527.50">std::sys::unix::thread::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (82 samples, 15.92%)</title><rect x="1.1650%" y="501" width="15.9223%" height="15" fill="rgb(251,118,11)"/><text x="1.4150%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (82 samples, 15.92%)</title><rect x="1.1650%" y="485" width="15.9223%" height="15" fill="rgb(217,147,25)"/><text x="1.4150%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (82 samples, 15.92%)</title><rect x="1.1650%" y="469" width="15.9223%" height="15" fill="rgb(247,81,37)"/><text x="1.4150%" y="479.50">core::ops::function::FnO..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (82 samples, 15.92%)</title><rect x="1.1650%" y="453" width="15.9223%" height="15" fill="rgb(209,12,38)"/><text x="1.4150%" y="463.50">std::sys_common::backtra..</text></g><g><title>cpal::host::alsa::input_stream_worker (82 samples, 15.92%)</title><rect x="1.1650%" y="437" width="15.9223%" height="15" fill="rgb(227,1,9)"/><text x="1.4150%" y="447.50">cpal::host::alsa::input_..</text></g><g><title>cpal::traits::DeviceTrait::build_input_stream::{{closure}} (9 samples, 1.75%)</title><rect x="15.3398%" y="421" width="1.7476%" height="15" fill="rgb(248,47,43)"/><text x="15.5898%" y="431.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_exclusive_slow (9 samples, 1.75%)</title><rect x="15.3398%" y="405" width="1.7476%" height="15" fill="rgb(221,10,30)"/><text x="15.5898%" y="415.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::wait_for_readers (9 samples, 1.75%)</title><rect x="15.3398%" y="389" width="1.7476%" height="15" fill="rgb(210,229,1)"/><text x="15.5898%" y="399.50"></text></g><g><title>syscall (7 samples, 1.36%)</title><rect x="15.7282%" y="373" width="1.3592%" height="15" fill="rgb(222,148,37)"/><text x="15.9782%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.19%)</title><rect x="17.0874%" y="549" width="0.1942%" height="15" fill="rgb(234,67,33)"/><text x="17.3374%" y="559.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="17.2816%" y="549" width="0.1942%" height="15" fill="rgb(247,98,35)"/><text x="17.5316%" y="559.50"></text></g><g><title>[[heap]] (1 samples, 0.19%)</title><rect x="17.4757%" y="549" width="0.1942%" height="15" fill="rgb(247,138,52)"/><text x="17.7257%" y="559.50"></text></g><g><title>_int_free (1 samples, 0.19%)</title><rect x="17.4757%" y="533" width="0.1942%" height="15" fill="rgb(213,79,30)"/><text x="17.7257%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 1.55%)</title><rect x="17.6699%" y="533" width="1.5534%" height="15" fill="rgb(246,177,23)"/><text x="17.9199%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="19.2233%" y="533" width="0.1942%" height="15" fill="rgb(230,62,27)"/><text x="19.4733%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="19.2233%" y="517" width="0.1942%" height="15" fill="rgb(216,154,8)"/><text x="19.4733%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="19.2233%" y="501" width="0.1942%" height="15" fill="rgb(244,35,45)"/><text x="19.4733%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="19.2233%" y="485" width="0.1942%" height="15" fill="rgb(251,115,12)"/><text x="19.4733%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="19.2233%" y="469" width="0.1942%" height="15" fill="rgb(240,54,50)"/><text x="19.4733%" y="479.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.39%)</title><rect x="21.1650%" y="501" width="0.3883%" height="15" fill="rgb(233,84,52)"/><text x="21.4150%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.39%)</title><rect x="21.1650%" y="485" width="0.3883%" height="15" fill="rgb(207,117,47)"/><text x="21.4150%" y="495.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.39%)</title><rect x="21.1650%" y="469" width="0.3883%" height="15" fill="rgb(249,43,39)"/><text x="21.4150%" y="479.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (2 samples, 0.39%)</title><rect x="21.1650%" y="453" width="0.3883%" height="15" fill="rgb(209,38,44)"/><text x="21.4150%" y="463.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (18 samples, 3.50%)</title><rect x="19.4175%" y="533" width="3.4951%" height="15" fill="rgb(236,212,23)"/><text x="19.6675%" y="543.50">&lt;st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (13 samples, 2.52%)</title><rect x="20.3883%" y="517" width="2.5243%" height="15" fill="rgb(242,79,21)"/><text x="20.6383%" y="527.50">&lt;&amp;..</text></g><g><title>std::io::stdio::Stdout::lock (7 samples, 1.36%)</title><rect x="21.5534%" y="501" width="1.3592%" height="15" fill="rgb(211,96,35)"/><text x="21.8034%" y="511.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (7 samples, 1.36%)</title><rect x="21.5534%" y="485" width="1.3592%" height="15" fill="rgb(253,215,40)"/><text x="21.8034%" y="495.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (7 samples, 1.36%)</title><rect x="21.5534%" y="469" width="1.3592%" height="15" fill="rgb(211,81,21)"/><text x="21.8034%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="22.9126%" y="533" width="0.1942%" height="15" fill="rgb(208,190,38)"/><text x="23.1626%" y="543.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.19%)</title><rect x="23.1068%" y="533" width="0.1942%" height="15" fill="rgb(235,213,38)"/><text x="23.3568%" y="543.50"></text></g><g><title>core::fmt::write (5 samples, 0.97%)</title><rect x="23.3010%" y="533" width="0.9709%" height="15" fill="rgb(237,122,38)"/><text x="23.5510%" y="543.50"></text></g><g><title>[[stack]] (35 samples, 6.80%)</title><rect x="17.6699%" y="549" width="6.7961%" height="15" fill="rgb(244,218,35)"/><text x="17.9199%" y="559.50">[[stack]]</text></g><g><title>std::thread::sleep (1 samples, 0.19%)</title><rect x="24.2718%" y="533" width="0.1942%" height="15" fill="rgb(240,68,47)"/><text x="24.5218%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.39%)</title><rect x="24.4660%" y="533" width="0.3883%" height="15" fill="rgb(210,16,53)"/><text x="24.7160%" y="543.50"></text></g><g><title>[crate-colorgrad] (3 samples, 0.58%)</title><rect x="24.4660%" y="549" width="0.5825%" height="15" fill="rgb(235,124,12)"/><text x="24.7160%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.19%)</title><rect x="24.8544%" y="533" width="0.1942%" height="15" fill="rgb(224,169,11)"/><text x="25.1044%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.58%)</title><rect x="25.0485%" y="533" width="0.5825%" height="15" fill="rgb(250,166,2)"/><text x="25.2985%" y="543.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.58%)</title><rect x="25.6311%" y="533" width="0.5825%" height="15" fill="rgb(242,216,29)"/><text x="25.8811%" y="543.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="26.2136%" y="533" width="0.1942%" height="15" fill="rgb(230,116,27)"/><text x="26.4636%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (4 samples, 0.78%)</title><rect x="26.4078%" y="533" width="0.7767%" height="15" fill="rgb(228,99,48)"/><text x="26.6578%" y="543.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.39%)</title><rect x="26.7961%" y="517" width="0.3883%" height="15" fill="rgb(253,11,6)"/><text x="27.0461%" y="527.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.39%)</title><rect x="26.7961%" y="501" width="0.3883%" height="15" fill="rgb(247,143,39)"/><text x="27.0461%" y="511.50"></text></g><g><title>std::memchr::memrchr (2 samples, 0.39%)</title><rect x="26.7961%" y="485" width="0.3883%" height="15" fill="rgb(236,97,10)"/><text x="27.0461%" y="495.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.39%)</title><rect x="26.7961%" y="469" width="0.3883%" height="15" fill="rgb(233,208,19)"/><text x="27.0461%" y="479.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.39%)</title><rect x="26.7961%" y="453" width="0.3883%" height="15" fill="rgb(216,164,2)"/><text x="27.0461%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.19%)</title><rect x="27.1845%" y="533" width="0.1942%" height="15" fill="rgb(220,129,5)"/><text x="27.4345%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.19%)</title><rect x="27.3786%" y="533" width="0.1942%" height="15" fill="rgb(242,17,10)"/><text x="27.6286%" y="543.50"></text></g><g><title>_start (1 samples, 0.19%)</title><rect x="27.5728%" y="533" width="0.1942%" height="15" fill="rgb(242,107,0)"/><text x="27.8228%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.19%)</title><rect x="27.7670%" y="533" width="0.1942%" height="15" fill="rgb(251,28,31)"/><text x="28.0170%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.78%)</title><rect x="27.9612%" y="533" width="0.7767%" height="15" fill="rgb(233,223,10)"/><text x="28.2112%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.19%)</title><rect x="28.7379%" y="533" width="0.1942%" height="15" fill="rgb(215,21,27)"/><text x="28.9879%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (2 samples, 0.39%)</title><rect x="28.9320%" y="533" width="0.3883%" height="15" fill="rgb(232,23,21)"/><text x="29.1820%" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.39%)</title><rect x="28.9320%" y="517" width="0.3883%" height="15" fill="rgb(244,5,23)"/><text x="29.1820%" y="527.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.19%)</title><rect x="29.3204%" y="533" width="0.1942%" height="15" fill="rgb(226,81,46)"/><text x="29.5704%" y="543.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.19%)</title><rect x="29.3204%" y="517" width="0.1942%" height="15" fill="rgb(247,70,30)"/><text x="29.5704%" y="527.50"></text></g><g><title>crate_colorgrad::animate2::_{{closure}} (1 samples, 0.19%)</title><rect x="29.5146%" y="533" width="0.1942%" height="15" fill="rgb(212,68,19)"/><text x="29.7646%" y="543.50"></text></g><g><title>crossterm::command::write_command_ansi (5 samples, 0.97%)</title><rect x="29.7087%" y="533" width="0.9709%" height="15" fill="rgb(240,187,13)"/><text x="29.9587%" y="543.50"></text></g><g><title>csscolorparser::Color::rgba_u8 (2 samples, 0.39%)</title><rect x="30.6796%" y="533" width="0.3883%" height="15" fill="rgb(223,113,26)"/><text x="30.9296%" y="543.50"></text></g><g><title>pa_log_levelv_meta (1 samples, 0.19%)</title><rect x="31.0680%" y="533" width="0.1942%" height="15" fill="rgb(206,192,2)"/><text x="31.3180%" y="543.50"></text></g><g><title>[libpulsecommon-14.0.so] (1 samples, 0.19%)</title><rect x="31.0680%" y="517" width="0.1942%" height="15" fill="rgb(241,108,4)"/><text x="31.3180%" y="527.50"></text></g><g><title>pa_log_set_ident (1 samples, 0.19%)</title><rect x="31.0680%" y="501" width="0.1942%" height="15" fill="rgb(247,173,49)"/><text x="31.3180%" y="511.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="31.0680%" y="485" width="0.1942%" height="15" fill="rgb(224,114,35)"/><text x="31.3180%" y="495.50"></text></g><g><title>iconv_open (1 samples, 0.19%)</title><rect x="31.0680%" y="469" width="0.1942%" height="15" fill="rgb(245,159,27)"/><text x="31.3180%" y="479.50"></text></g><g><title>__GI___gconv_open (1 samples, 0.19%)</title><rect x="31.0680%" y="453" width="0.1942%" height="15" fill="rgb(245,172,44)"/><text x="31.3180%" y="463.50"></text></g><g><title>__gconv_find_transform (1 samples, 0.19%)</title><rect x="31.0680%" y="437" width="0.1942%" height="15" fill="rgb(236,23,11)"/><text x="31.3180%" y="447.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.19%)</title><rect x="31.0680%" y="421" width="0.1942%" height="15" fill="rgb(205,117,38)"/><text x="31.3180%" y="431.50"></text></g><g><title>__gconv_read_conf (1 samples, 0.19%)</title><rect x="31.0680%" y="405" width="0.1942%" height="15" fill="rgb(237,72,25)"/><text x="31.3180%" y="415.50"></text></g><g><title>add_alias2.part.0 (1 samples, 0.19%)</title><rect x="31.0680%" y="389" width="0.1942%" height="15" fill="rgb(244,70,9)"/><text x="31.3180%" y="399.50"></text></g><g><title>__GI___tsearch (1 samples, 0.19%)</title><rect x="31.0680%" y="373" width="0.1942%" height="15" fill="rgb(217,125,39)"/><text x="31.3180%" y="383.50"></text></g><g><title>pulse_new (1 samples, 0.19%)</title><rect x="31.2621%" y="533" width="0.1942%" height="15" fill="rgb(235,36,10)"/><text x="31.5121%" y="543.50"></text></g><g><title>pa_threaded_mainloop_start (1 samples, 0.19%)</title><rect x="31.2621%" y="517" width="0.1942%" height="15" fill="rgb(251,123,47)"/><text x="31.5121%" y="527.50"></text></g><g><title>pa_thread_new (1 samples, 0.19%)</title><rect x="31.2621%" y="501" width="0.1942%" height="15" fill="rgb(221,13,13)"/><text x="31.5121%" y="511.50"></text></g><g><title>__pthread_create_2_1 (1 samples, 0.19%)</title><rect x="31.2621%" y="485" width="0.1942%" height="15" fill="rgb(238,131,9)"/><text x="31.5121%" y="495.50"></text></g><g><title>create_thread (1 samples, 0.19%)</title><rect x="31.2621%" y="469" width="0.1942%" height="15" fill="rgb(211,50,8)"/><text x="31.5121%" y="479.50"></text></g><g><title>__GI___clone (1 samples, 0.19%)</title><rect x="31.2621%" y="453" width="0.1942%" height="15" fill="rgb(245,182,24)"/><text x="31.5121%" y="463.50"></text></g><g><title>snd_dlopen (1 samples, 0.19%)</title><rect x="31.4563%" y="533" width="0.1942%" height="15" fill="rgb(242,14,37)"/><text x="31.7063%" y="543.50"></text></g><g><title>dlopen (1 samples, 0.19%)</title><rect x="31.4563%" y="517" width="0.1942%" height="15" fill="rgb(246,228,12)"/><text x="31.7063%" y="527.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.19%)</title><rect x="31.4563%" y="501" width="0.1942%" height="15" fill="rgb(213,55,15)"/><text x="31.7063%" y="511.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.19%)</title><rect x="31.4563%" y="485" width="0.1942%" height="15" fill="rgb(209,9,3)"/><text x="31.7063%" y="495.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="31.4563%" y="469" width="0.1942%" height="15" fill="rgb(230,59,30)"/><text x="31.7063%" y="479.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.19%)</title><rect x="31.4563%" y="453" width="0.1942%" height="15" fill="rgb(209,121,21)"/><text x="31.7063%" y="463.50"></text></g><g><title>_dl_open (1 samples, 0.19%)</title><rect x="31.4563%" y="437" width="0.1942%" height="15" fill="rgb(220,109,13)"/><text x="31.7063%" y="447.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="31.4563%" y="421" width="0.1942%" height="15" fill="rgb(232,18,1)"/><text x="31.7063%" y="431.50"></text></g><g><title>dl_open_worker (1 samples, 0.19%)</title><rect x="31.4563%" y="405" width="0.1942%" height="15" fill="rgb(215,41,42)"/><text x="31.7063%" y="415.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.19%)</title><rect x="31.4563%" y="389" width="0.1942%" height="15" fill="rgb(224,123,36)"/><text x="31.7063%" y="399.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="31.4563%" y="373" width="0.1942%" height="15" fill="rgb(240,125,3)"/><text x="31.7063%" y="383.50"></text></g><g><title>openaux (1 samples, 0.19%)</title><rect x="31.4563%" y="357" width="0.1942%" height="15" fill="rgb(205,98,50)"/><text x="31.7063%" y="367.50"></text></g><g><title>_dl_map_object (1 samples, 0.19%)</title><rect x="31.4563%" y="341" width="0.1942%" height="15" fill="rgb(205,185,37)"/><text x="31.7063%" y="351.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.19%)</title><rect x="31.4563%" y="325" width="0.1942%" height="15" fill="rgb(238,207,15)"/><text x="31.7063%" y="335.50"></text></g><g><title>__mmap (1 samples, 0.19%)</title><rect x="31.4563%" y="309" width="0.1942%" height="15" fill="rgb(213,199,42)"/><text x="31.7063%" y="319.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.19%)</title><rect x="31.6505%" y="533" width="0.1942%" height="15" fill="rgb(235,201,11)"/><text x="31.9005%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.19%)</title><rect x="31.6505%" y="517" width="0.1942%" height="15" fill="rgb(207,46,11)"/><text x="31.9005%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.19%)</title><rect x="31.6505%" y="501" width="0.1942%" height="15" fill="rgb(241,35,35)"/><text x="31.9005%" y="511.50"></text></g><g><title>[unknown] (36 samples, 6.99%)</title><rect x="25.0485%" y="549" width="6.9903%" height="15" fill="rgb(243,32,47)"/><text x="25.2985%" y="559.50">[unknown]</text></g><g><title>tokio::runtime::Runtime::block_on (1 samples, 0.19%)</title><rect x="31.8447%" y="533" width="0.1942%" height="15" fill="rgb(247,202,23)"/><text x="32.0947%" y="543.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (1 samples, 0.19%)</title><rect x="31.8447%" y="517" width="0.1942%" height="15" fill="rgb(219,102,11)"/><text x="32.0947%" y="527.50"></text></g><g><title>crate_colorgrad::animate2::_{{closure}} (1 samples, 0.19%)</title><rect x="31.8447%" y="501" width="0.1942%" height="15" fill="rgb(243,110,44)"/><text x="32.0947%" y="511.50"></text></g><g><title>&lt;cpal::platform::platform_impl::Device as cpal::traits::DeviceTrait&gt;::default_input_config (1 samples, 0.19%)</title><rect x="31.8447%" y="485" width="0.1942%" height="15" fill="rgb(222,74,54)"/><text x="32.0947%" y="495.50"></text></g><g><title>cpal::host::alsa::Device::default_config (1 samples, 0.19%)</title><rect x="31.8447%" y="469" width="0.1942%" height="15" fill="rgb(216,99,12)"/><text x="32.0947%" y="479.50"></text></g><g><title>cpal::host::alsa::Device::supported_configs (1 samples, 0.19%)</title><rect x="31.8447%" y="453" width="0.1942%" height="15" fill="rgb(226,22,26)"/><text x="32.0947%" y="463.50"></text></g><g><title>alsa::pcm::PCM::new (1 samples, 0.19%)</title><rect x="31.8447%" y="437" width="0.1942%" height="15" fill="rgb(217,163,10)"/><text x="32.0947%" y="447.50"></text></g><g><title>snd_pcm_open (1 samples, 0.19%)</title><rect x="31.8447%" y="421" width="0.1942%" height="15" fill="rgb(213,25,53)"/><text x="32.0947%" y="431.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="31.8447%" y="405" width="0.1942%" height="15" fill="rgb(252,105,26)"/><text x="32.0947%" y="415.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="31.8447%" y="389" width="0.1942%" height="15" fill="rgb(220,39,43)"/><text x="32.0947%" y="399.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="31.8447%" y="373" width="0.1942%" height="15" fill="rgb(229,68,48)"/><text x="32.0947%" y="383.50"></text></g><g><title>[libasound.so.2.0.0] (1 samples, 0.19%)</title><rect x="31.8447%" y="357" width="0.1942%" height="15" fill="rgb(252,8,32)"/><text x="32.0947%" y="367.50"></text></g><g><title>snd_dlopen (1 samples, 0.19%)</title><rect x="31.8447%" y="341" width="0.1942%" height="15" fill="rgb(223,20,43)"/><text x="32.0947%" y="351.50"></text></g><g><title>dlopen (1 samples, 0.19%)</title><rect x="31.8447%" y="325" width="0.1942%" height="15" fill="rgb(229,81,49)"/><text x="32.0947%" y="335.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.19%)</title><rect x="31.8447%" y="309" width="0.1942%" height="15" fill="rgb(236,28,36)"/><text x="32.0947%" y="319.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.19%)</title><rect x="31.8447%" y="293" width="0.1942%" height="15" fill="rgb(249,185,26)"/><text x="32.0947%" y="303.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="31.8447%" y="277" width="0.1942%" height="15" fill="rgb(249,174,33)"/><text x="32.0947%" y="287.50"></text></g><g><title>[libdl-2.33.so] (1 samples, 0.19%)</title><rect x="31.8447%" y="261" width="0.1942%" height="15" fill="rgb(233,201,37)"/><text x="32.0947%" y="271.50"></text></g><g><title>_dl_open (1 samples, 0.19%)</title><rect x="31.8447%" y="245" width="0.1942%" height="15" fill="rgb(221,78,26)"/><text x="32.0947%" y="255.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.19%)</title><rect x="31.8447%" y="229" width="0.1942%" height="15" fill="rgb(250,127,30)"/><text x="32.0947%" y="239.50"></text></g><g><title>dl_open_worker (1 samples, 0.19%)</title><rect x="31.8447%" y="213" width="0.1942%" height="15" fill="rgb(230,49,44)"/><text x="32.0947%" y="223.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.19%)</title><rect x="31.8447%" y="197" width="0.1942%" height="15" fill="rgb(229,67,23)"/><text x="32.0947%" y="207.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.19%)</title><rect x="31.8447%" y="181" width="0.1942%" height="15" fill="rgb(249,83,47)"/><text x="32.0947%" y="191.50"></text></g><g><title>do_lookup_x (1 samples, 0.19%)</title><rect x="31.8447%" y="165" width="0.1942%" height="15" fill="rgb(215,43,3)"/><text x="32.0947%" y="175.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.19%)</title><rect x="38.2524%" y="437" width="0.1942%" height="15" fill="rgb(238,154,13)"/><text x="38.5024%" y="447.50"></text></g><g><title>__GI___clone (34 samples, 6.60%)</title><rect x="32.0388%" y="549" width="6.6019%" height="15" fill="rgb(219,56,2)"/><text x="32.2888%" y="559.50">__GI___cl..</text></g><g><title>start_thread (4 samples, 0.78%)</title><rect x="37.8641%" y="533" width="0.7767%" height="15" fill="rgb(233,0,4)"/><text x="38.1141%" y="543.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.39%)</title><rect x="38.2524%" y="517" width="0.3883%" height="15" fill="rgb(235,30,7)"/><text x="38.5024%" y="527.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.39%)</title><rect x="38.2524%" y="501" width="0.3883%" height="15" fill="rgb(250,79,13)"/><text x="38.5024%" y="511.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.39%)</title><rect x="38.2524%" y="485" width="0.3883%" height="15" fill="rgb(211,146,34)"/><text x="38.5024%" y="495.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 0.39%)</title><rect x="38.2524%" y="469" width="0.3883%" height="15" fill="rgb(228,22,38)"/><text x="38.5024%" y="479.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 0.39%)</title><rect x="38.2524%" y="453" width="0.3883%" height="15" fill="rgb(235,168,5)"/><text x="38.5024%" y="463.50"></text></g><g><title>__GI___mprotect (1 samples, 0.19%)</title><rect x="38.4466%" y="437" width="0.1942%" height="15" fill="rgb(221,155,16)"/><text x="38.6966%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (3 samples, 0.58%)</title><rect x="38.6408%" y="549" width="0.5825%" height="15" fill="rgb(215,215,53)"/><text x="38.8908%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.39%)</title><rect x="41.1650%" y="293" width="0.3883%" height="15" fill="rgb(223,4,10)"/><text x="41.4150%" y="303.50"></text></g><g><title>colorgrad::Gradient::at (2 samples, 0.39%)</title><rect x="41.1650%" y="277" width="0.3883%" height="15" fill="rgb(234,103,6)"/><text x="41.4150%" y="287.50"></text></g><g><title>&lt;colorgrad::RainbowGradient as colorgrad::GradientBase&gt;::at (2 samples, 0.39%)</title><rect x="41.1650%" y="261" width="0.3883%" height="15" fill="rgb(227,97,0)"/><text x="41.4150%" y="271.50"></text></g><g><title>sincosf32x (2 samples, 0.39%)</title><rect x="41.1650%" y="245" width="0.3883%" height="15" fill="rgb(234,150,53)"/><text x="41.4150%" y="255.50"></text></g><g><title>__GI___libc_free (1 samples, 0.19%)</title><rect x="41.5534%" y="293" width="0.1942%" height="15" fill="rgb(228,201,54)"/><text x="41.8034%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="41.9417%" y="277" width="0.1942%" height="15" fill="rgb(222,22,37)"/><text x="42.1917%" y="287.50"></text></g><g><title>colorgrad::CustomGradient::build (3 samples, 0.58%)</title><rect x="41.7476%" y="293" width="0.5825%" height="15" fill="rgb(237,53,32)"/><text x="41.9976%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="42.1359%" y="277" width="0.1942%" height="15" fill="rgb(233,25,53)"/><text x="42.3859%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 1.55%)</title><rect x="40.9709%" y="325" width="1.5534%" height="15" fill="rgb(210,40,34)"/><text x="41.2209%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 1.55%)</title><rect x="40.9709%" y="309" width="1.5534%" height="15" fill="rgb(241,220,44)"/><text x="41.2209%" y="319.50"></text></g><g><title>colorgrad::CustomGradient::colors (1 samples, 0.19%)</title><rect x="42.3301%" y="293" width="0.1942%" height="15" fill="rgb(235,28,35)"/><text x="42.5801%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="42.3301%" y="277" width="0.1942%" height="15" fill="rgb(210,56,17)"/><text x="42.5801%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="42.3301%" y="261" width="0.1942%" height="15" fill="rgb(224,130,29)"/><text x="42.5801%" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="42.5243%" y="325" width="0.1942%" height="15" fill="rgb(235,212,8)"/><text x="42.7743%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="42.5243%" y="309" width="0.1942%" height="15" fill="rgb(223,33,50)"/><text x="42.7743%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="42.5243%" y="293" width="0.1942%" height="15" fill="rgb(219,149,13)"/><text x="42.7743%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="42.5243%" y="277" width="0.1942%" height="15" fill="rgb(250,156,29)"/><text x="42.7743%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.19%)</title><rect x="42.5243%" y="261" width="0.1942%" height="15" fill="rgb(216,193,19)"/><text x="42.7743%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.19%)</title><rect x="42.5243%" y="245" width="0.1942%" height="15" fill="rgb(216,135,14)"/><text x="42.7743%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.19%)</title><rect x="42.5243%" y="229" width="0.1942%" height="15" fill="rgb(241,47,5)"/><text x="42.7743%" y="239.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.19%)</title><rect x="42.5243%" y="213" width="0.1942%" height="15" fill="rgb(233,42,35)"/><text x="42.7743%" y="223.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.19%)</title><rect x="42.5243%" y="197" width="0.1942%" height="15" fill="rgb(231,13,6)"/><text x="42.7743%" y="207.50"></text></g><g><title>__libc_write (1 samples, 0.19%)</title><rect x="42.5243%" y="181" width="0.1942%" height="15" fill="rgb(207,181,40)"/><text x="42.7743%" y="191.50"></text></g><g><title>__GI___libc_free (1 samples, 0.19%)</title><rect x="42.7184%" y="325" width="0.1942%" height="15" fill="rgb(254,173,49)"/><text x="42.9684%" y="335.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (5 samples, 0.97%)</title><rect x="42.9126%" y="229" width="0.9709%" height="15" fill="rgb(221,1,38)"/><text x="43.1626%" y="239.50"></text></g><g><title>pa_threaded_mainloop_wait (5 samples, 0.97%)</title><rect x="42.9126%" y="213" width="0.9709%" height="15" fill="rgb(206,124,46)"/><text x="43.1626%" y="223.50"></text></g><g><title>__pthread_cond_wait (5 samples, 0.97%)</title><rect x="42.9126%" y="197" width="0.9709%" height="15" fill="rgb(249,21,11)"/><text x="43.1626%" y="207.50"></text></g><g><title>__futex_abstimed_wait_common64 (5 samples, 0.97%)</title><rect x="42.9126%" y="181" width="0.9709%" height="15" fill="rgb(222,201,40)"/><text x="43.1626%" y="191.50"></text></g><g><title>cpal::traits::DeviceTrait::build_input_stream (6 samples, 1.17%)</title><rect x="42.9126%" y="325" width="1.1650%" height="15" fill="rgb(235,61,29)"/><text x="43.1626%" y="335.50"></text></g><g><title>cpal::host::alsa::Device::build_stream_inner (6 samples, 1.17%)</title><rect x="42.9126%" y="309" width="1.1650%" height="15" fill="rgb(219,207,3)"/><text x="43.1626%" y="319.50"></text></g><g><title>alsa::pcm::PCM::prepare (6 samples, 1.17%)</title><rect x="42.9126%" y="293" width="1.1650%" height="15" fill="rgb(222,56,46)"/><text x="43.1626%" y="303.50"></text></g><g><title>snd_pcm_prepare (6 samples, 1.17%)</title><rect x="42.9126%" y="277" width="1.1650%" height="15" fill="rgb(239,76,54)"/><text x="43.1626%" y="287.50"></text></g><g><title>[libasound.so.2.0.0] (6 samples, 1.17%)</title><rect x="42.9126%" y="261" width="1.1650%" height="15" fill="rgb(231,124,27)"/><text x="43.1626%" y="271.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (6 samples, 1.17%)</title><rect x="42.9126%" y="245" width="1.1650%" height="15" fill="rgb(249,195,6)"/><text x="43.1626%" y="255.50"></text></g><g><title>pa_stream_connect_record (1 samples, 0.19%)</title><rect x="43.8835%" y="229" width="0.1942%" height="15" fill="rgb(237,174,47)"/><text x="44.1335%" y="239.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="43.8835%" y="213" width="0.1942%" height="15" fill="rgb(206,201,31)"/><text x="44.1335%" y="223.50"></text></g><g><title>pa_smoother_new (1 samples, 0.19%)</title><rect x="43.8835%" y="197" width="0.1942%" height="15" fill="rgb(231,57,52)"/><text x="44.1335%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="48.5437%" y="133" width="0.1942%" height="15" fill="rgb(248,177,22)"/><text x="48.7937%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="48.5437%" y="117" width="0.1942%" height="15" fill="rgb(215,211,37)"/><text x="48.7937%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.19%)</title><rect x="48.5437%" y="101" width="0.1942%" height="15" fill="rgb(241,128,51)"/><text x="48.7937%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (7 samples, 1.36%)</title><rect x="48.5437%" y="181" width="1.3592%" height="15" fill="rgb(227,165,31)"/><text x="48.7937%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 1.36%)</title><rect x="48.5437%" y="165" width="1.3592%" height="15" fill="rgb(228,167,24)"/><text x="48.7937%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (7 samples, 1.36%)</title><rect x="48.5437%" y="149" width="1.3592%" height="15" fill="rgb(228,143,12)"/><text x="48.7937%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 1.17%)</title><rect x="48.7379%" y="133" width="1.1650%" height="15" fill="rgb(249,149,8)"/><text x="48.9879%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.78%)</title><rect x="49.1262%" y="117" width="0.7767%" height="15" fill="rgb(243,35,44)"/><text x="49.3762%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="48.3495%" y="197" width="4.0777%" height="15" fill="rgb(246,89,9)"/><text x="48.5995%" y="207.50">&lt;std..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (13 samples, 2.52%)</title><rect x="49.9029%" y="181" width="2.5243%" height="15" fill="rgb(233,213,13)"/><text x="50.1529%" y="191.50">st..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (13 samples, 2.52%)</title><rect x="49.9029%" y="165" width="2.5243%" height="15" fill="rgb(233,141,41)"/><text x="50.1529%" y="175.50">&lt;s..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (13 samples, 2.52%)</title><rect x="49.9029%" y="149" width="2.5243%" height="15" fill="rgb(239,167,4)"/><text x="50.1529%" y="159.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (13 samples, 2.52%)</title><rect x="49.9029%" y="133" width="2.5243%" height="15" fill="rgb(209,217,16)"/><text x="50.1529%" y="143.50">st..</text></g><g><title>__libc_write (13 samples, 2.52%)</title><rect x="49.9029%" y="117" width="2.5243%" height="15" fill="rgb(219,88,35)"/><text x="50.1529%" y="127.50">__..</text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (2 samples, 0.39%)</title><rect x="52.4272%" y="197" width="0.3883%" height="15" fill="rgb(220,193,23)"/><text x="52.6772%" y="207.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::buffered (2 samples, 0.39%)</title><rect x="52.4272%" y="181" width="0.3883%" height="15" fill="rgb(230,90,52)"/><text x="52.6772%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::buffer (2 samples, 0.39%)</title><rect x="52.4272%" y="165" width="0.3883%" height="15" fill="rgb(252,106,19)"/><text x="52.6772%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.39%)</title><rect x="52.4272%" y="149" width="0.3883%" height="15" fill="rgb(206,74,20)"/><text x="52.6772%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.39%)</title><rect x="52.4272%" y="133" width="0.3883%" height="15" fill="rgb(230,138,44)"/><text x="52.6772%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (45 samples, 8.74%)</title><rect x="46.7961%" y="245" width="8.7379%" height="15" fill="rgb(235,182,43)"/><text x="47.0461%" y="255.50">&lt;std::io::st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (40 samples, 7.77%)</title><rect x="47.7670%" y="229" width="7.7670%" height="15" fill="rgb(242,16,51)"/><text x="48.0170%" y="239.50">&lt;std::io::b..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (40 samples, 7.77%)</title><rect x="47.7670%" y="213" width="7.7670%" height="15" fill="rgb(248,9,4)"/><text x="48.0170%" y="223.50">&lt;std::io::b..</text></g><g><title>std::memchr::memrchr (14 samples, 2.72%)</title><rect x="52.8155%" y="197" width="2.7184%" height="15" fill="rgb(210,31,22)"/><text x="53.0655%" y="207.50">st..</text></g><g><title>std::sys::unix::memchr::memrchr (14 samples, 2.72%)</title><rect x="52.8155%" y="181" width="2.7184%" height="15" fill="rgb(239,54,39)"/><text x="53.0655%" y="191.50">st..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (14 samples, 2.72%)</title><rect x="52.8155%" y="165" width="2.7184%" height="15" fill="rgb(230,99,41)"/><text x="53.0655%" y="175.50">st..</text></g><g><title>__memrchr_avx2 (14 samples, 2.72%)</title><rect x="52.8155%" y="149" width="2.7184%" height="15" fill="rgb(253,106,12)"/><text x="53.0655%" y="159.50">__..</text></g><g><title>core::ptr::drop_in_place (9 samples, 1.75%)</title><rect x="55.5340%" y="245" width="1.7476%" height="15" fill="rgb(213,46,41)"/><text x="55.7840%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 1.75%)</title><rect x="55.5340%" y="229" width="1.7476%" height="15" fill="rgb(215,133,35)"/><text x="55.7840%" y="239.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.75%)</title><rect x="55.5340%" y="213" width="1.7476%" height="15" fill="rgb(213,28,5)"/><text x="55.7840%" y="223.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (9 samples, 1.75%)</title><rect x="55.5340%" y="197" width="1.7476%" height="15" fill="rgb(215,77,49)"/><text x="55.7840%" y="207.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (9 samples, 1.75%)</title><rect x="55.5340%" y="181" width="1.7476%" height="15" fill="rgb(248,100,22)"/><text x="55.7840%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (72 samples, 13.98%)</title><rect x="45.6311%" y="293" width="13.9806%" height="15" fill="rgb(208,67,9)"/><text x="45.8811%" y="303.50">&lt;&amp;mut W as core::fmt:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (71 samples, 13.79%)</title><rect x="45.8252%" y="277" width="13.7864%" height="15" fill="rgb(219,133,21)"/><text x="46.0752%" y="287.50">&lt;std::io::stdio::Stdo..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (69 samples, 13.40%)</title><rect x="46.2136%" y="261" width="13.3981%" height="15" fill="rgb(246,46,29)"/><text x="46.4636%" y="271.50">&lt;&amp;std::io::stdio::St..</text></g><g><title>std::io::stdio::Stdout::lock (12 samples, 2.33%)</title><rect x="57.2816%" y="245" width="2.3301%" height="15" fill="rgb(246,185,52)"/><text x="57.5316%" y="255.50">s..</text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (12 samples, 2.33%)</title><rect x="57.2816%" y="229" width="2.3301%" height="15" fill="rgb(252,136,11)"/><text x="57.5316%" y="239.50">s..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (12 samples, 2.33%)</title><rect x="57.2816%" y="213" width="2.3301%" height="15" fill="rgb(219,138,53)"/><text x="57.5316%" y="223.50">s..</text></g><g><title>__GI___pthread_mutex_lock (12 samples, 2.33%)</title><rect x="57.2816%" y="197" width="2.3301%" height="15" fill="rgb(211,51,23)"/><text x="57.5316%" y="207.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="60.7767%" y="101" width="0.1942%" height="15" fill="rgb(247,221,28)"/><text x="61.0267%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="60.7767%" y="85" width="0.1942%" height="15" fill="rgb(251,222,45)"/><text x="61.0267%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.19%)</title><rect x="60.7767%" y="69" width="0.1942%" height="15" fill="rgb(217,162,53)"/><text x="61.0267%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.39%)</title><rect x="60.7767%" y="149" width="0.3883%" height="15" fill="rgb(229,93,14)"/><text x="61.0267%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.39%)</title><rect x="60.7767%" y="133" width="0.3883%" height="15" fill="rgb(209,67,49)"/><text x="61.0267%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.39%)</title><rect x="60.7767%" y="117" width="0.3883%" height="15" fill="rgb(213,87,29)"/><text x="61.0267%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="60.9709%" y="101" width="0.1942%" height="15" fill="rgb(205,151,52)"/><text x="61.2209%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="60.9709%" y="85" width="0.1942%" height="15" fill="rgb(253,215,39)"/><text x="61.2209%" y="95.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (12 samples, 2.33%)</title><rect x="60.7767%" y="165" width="2.3301%" height="15" fill="rgb(221,220,41)"/><text x="61.0267%" y="175.50">&lt;..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (10 samples, 1.94%)</title><rect x="61.1650%" y="149" width="1.9417%" height="15" fill="rgb(218,133,21)"/><text x="61.4150%" y="159.50">s..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (10 samples, 1.94%)</title><rect x="61.1650%" y="133" width="1.9417%" height="15" fill="rgb(221,193,43)"/><text x="61.4150%" y="143.50">&lt;..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (10 samples, 1.94%)</title><rect x="61.1650%" y="117" width="1.9417%" height="15" fill="rgb(240,128,52)"/><text x="61.4150%" y="127.50">&lt;..</text></g><g><title>std::sys::unix::fd::FileDesc::write (10 samples, 1.94%)</title><rect x="61.1650%" y="101" width="1.9417%" height="15" fill="rgb(253,114,12)"/><text x="61.4150%" y="111.50">s..</text></g><g><title>__libc_write (10 samples, 1.94%)</title><rect x="61.1650%" y="85" width="1.9417%" height="15" fill="rgb(215,223,47)"/><text x="61.4150%" y="95.50">_..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="60.3883%" y="213" width="4.0777%" height="15" fill="rgb(248,225,23)"/><text x="60.6383%" y="223.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="60.3883%" y="197" width="4.0777%" height="15" fill="rgb(250,108,0)"/><text x="60.6383%" y="207.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="60.3883%" y="181" width="4.0777%" height="15" fill="rgb(228,208,7)"/><text x="60.6383%" y="191.50">&lt;std..</text></g><g><title>std::memchr::memrchr (7 samples, 1.36%)</title><rect x="63.1068%" y="165" width="1.3592%" height="15" fill="rgb(244,45,10)"/><text x="63.3568%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr (7 samples, 1.36%)</title><rect x="63.1068%" y="149" width="1.3592%" height="15" fill="rgb(207,125,25)"/><text x="63.3568%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (7 samples, 1.36%)</title><rect x="63.1068%" y="133" width="1.3592%" height="15" fill="rgb(210,195,18)"/><text x="63.3568%" y="143.50"></text></g><g><title>__memrchr_avx2 (5 samples, 0.97%)</title><rect x="63.4951%" y="117" width="0.9709%" height="15" fill="rgb(249,80,12)"/><text x="63.7451%" y="127.50"></text></g><g><title>__GI___pthread_mutex_unlock (1 samples, 0.19%)</title><rect x="64.4660%" y="149" width="0.1942%" height="15" fill="rgb(221,65,9)"/><text x="64.7160%" y="159.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 1.17%)</title><rect x="64.4660%" y="213" width="1.1650%" height="15" fill="rgb(235,49,36)"/><text x="64.7160%" y="223.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 1.17%)</title><rect x="64.4660%" y="197" width="1.1650%" height="15" fill="rgb(225,32,20)"/><text x="64.7160%" y="207.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.17%)</title><rect x="64.4660%" y="181" width="1.1650%" height="15" fill="rgb(215,141,46)"/><text x="64.7160%" y="191.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (6 samples, 1.17%)</title><rect x="64.4660%" y="165" width="1.1650%" height="15" fill="rgb(250,160,47)"/><text x="64.7160%" y="175.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (5 samples, 0.97%)</title><rect x="64.6602%" y="149" width="0.9709%" height="15" fill="rgb(216,222,40)"/><text x="64.9102%" y="159.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 6.21%)</title><rect x="59.8058%" y="261" width="6.2136%" height="15" fill="rgb(234,217,39)"/><text x="60.0558%" y="271.50">&lt;&amp;mut W ..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (32 samples, 6.21%)</title><rect x="59.8058%" y="245" width="6.2136%" height="15" fill="rgb(207,178,40)"/><text x="60.0558%" y="255.50">&lt;std::io..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (31 samples, 6.02%)</title><rect x="60.0000%" y="229" width="6.0194%" height="15" fill="rgb(221,136,13)"/><text x="60.2500%" y="239.50">&lt;&amp;std::i..</text></g><g><title>std::io::stdio::Stdout::lock (2 samples, 0.39%)</title><rect x="65.6311%" y="213" width="0.3883%" height="15" fill="rgb(249,199,10)"/><text x="65.8811%" y="223.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (2 samples, 0.39%)</title><rect x="65.6311%" y="197" width="0.3883%" height="15" fill="rgb(249,222,13)"/><text x="65.8811%" y="207.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (2 samples, 0.39%)</title><rect x="65.6311%" y="181" width="0.3883%" height="15" fill="rgb(244,185,38)"/><text x="65.8811%" y="191.50"></text></g><g><title>__GI___pthread_mutex_lock (2 samples, 0.39%)</title><rect x="65.6311%" y="165" width="0.3883%" height="15" fill="rgb(236,202,9)"/><text x="65.8811%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.58%)</title><rect x="66.0194%" y="261" width="0.5825%" height="15" fill="rgb(250,229,37)"/><text x="66.2694%" y="271.50"></text></g><g><title>core::fmt::Formatter::sign_plus (3 samples, 0.58%)</title><rect x="66.0194%" y="245" width="0.5825%" height="15" fill="rgb(206,174,23)"/><text x="66.2694%" y="255.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u16&gt;::fmt (37 samples, 7.18%)</title><rect x="59.6117%" y="293" width="7.1845%" height="15" fill="rgb(211,33,43)"/><text x="59.8617%" y="303.50">core::fmt:..</text></g><g><title>core::fmt::num::imp::fmt_u64 (37 samples, 7.18%)</title><rect x="59.6117%" y="277" width="7.1845%" height="15" fill="rgb(245,58,50)"/><text x="59.8617%" y="287.50">core::fmt:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="66.6019%" y="261" width="0.1942%" height="15" fill="rgb(244,68,36)"/><text x="66.8519%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="67.7670%" y="165" width="0.1942%" height="15" fill="rgb(232,229,15)"/><text x="68.0170%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="67.7670%" y="149" width="0.1942%" height="15" fill="rgb(254,30,23)"/><text x="68.0170%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="67.7670%" y="133" width="0.1942%" height="15" fill="rgb(235,160,14)"/><text x="68.0170%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="67.7670%" y="117" width="0.1942%" height="15" fill="rgb(212,155,44)"/><text x="68.0170%" y="127.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.97%)</title><rect x="67.7670%" y="181" width="0.9709%" height="15" fill="rgb(226,2,50)"/><text x="68.0170%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.78%)</title><rect x="67.9612%" y="165" width="0.7767%" height="15" fill="rgb(234,177,6)"/><text x="68.2112%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (4 samples, 0.78%)</title><rect x="67.9612%" y="149" width="0.7767%" height="15" fill="rgb(217,24,9)"/><text x="68.2112%" y="159.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (4 samples, 0.78%)</title><rect x="67.9612%" y="133" width="0.7767%" height="15" fill="rgb(220,13,46)"/><text x="68.2112%" y="143.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 0.78%)</title><rect x="67.9612%" y="117" width="0.7767%" height="15" fill="rgb(239,221,27)"/><text x="68.2112%" y="127.50"></text></g><g><title>__libc_write (4 samples, 0.78%)</title><rect x="67.9612%" y="101" width="0.7767%" height="15" fill="rgb(222,198,25)"/><text x="68.2112%" y="111.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 1.55%)</title><rect x="67.7670%" y="213" width="1.5534%" height="15" fill="rgb(211,99,13)"/><text x="68.0170%" y="223.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (8 samples, 1.55%)</title><rect x="67.7670%" y="197" width="1.5534%" height="15" fill="rgb(232,111,31)"/><text x="68.0170%" y="207.50"></text></g><g><title>std::memchr::memrchr (3 samples, 0.58%)</title><rect x="68.7379%" y="181" width="0.5825%" height="15" fill="rgb(245,82,37)"/><text x="68.9879%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr (3 samples, 0.58%)</title><rect x="68.7379%" y="165" width="0.5825%" height="15" fill="rgb(227,149,46)"/><text x="68.9879%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (3 samples, 0.58%)</title><rect x="68.7379%" y="149" width="0.5825%" height="15" fill="rgb(218,36,50)"/><text x="68.9879%" y="159.50"></text></g><g><title>__memrchr_avx2 (3 samples, 0.58%)</title><rect x="68.7379%" y="133" width="0.5825%" height="15" fill="rgb(226,80,48)"/><text x="68.9879%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 1.75%)</title><rect x="67.7670%" y="277" width="1.7476%" height="15" fill="rgb(238,224,15)"/><text x="68.0170%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (9 samples, 1.75%)</title><rect x="67.7670%" y="261" width="1.7476%" height="15" fill="rgb(241,136,10)"/><text x="68.0170%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (9 samples, 1.75%)</title><rect x="67.7670%" y="245" width="1.7476%" height="15" fill="rgb(208,32,45)"/><text x="68.0170%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 1.75%)</title><rect x="67.7670%" y="229" width="1.7476%" height="15" fill="rgb(207,135,9)"/><text x="68.0170%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.19%)</title><rect x="69.3204%" y="213" width="0.1942%" height="15" fill="rgb(206,86,44)"/><text x="69.5704%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.19%)</title><rect x="69.3204%" y="197" width="0.1942%" height="15" fill="rgb(245,177,15)"/><text x="69.5704%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.19%)</title><rect x="69.3204%" y="181" width="0.1942%" height="15" fill="rgb(206,64,50)"/><text x="69.5704%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.19%)</title><rect x="69.3204%" y="165" width="0.1942%" height="15" fill="rgb(234,36,40)"/><text x="69.5704%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.19%)</title><rect x="69.3204%" y="149" width="0.1942%" height="15" fill="rgb(213,64,8)"/><text x="69.5704%" y="159.50"></text></g><g><title>core::mem::replace (1 samples, 0.19%)</title><rect x="69.3204%" y="133" width="0.1942%" height="15" fill="rgb(210,75,36)"/><text x="69.5704%" y="143.50"></text></g><g><title>core::mem::swap (1 samples, 0.19%)</title><rect x="69.3204%" y="117" width="0.1942%" height="15" fill="rgb(229,88,21)"/><text x="69.5704%" y="127.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.19%)</title><rect x="69.3204%" y="101" width="0.1942%" height="15" fill="rgb(252,204,47)"/><text x="69.5704%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="69.3204%" y="85" width="0.1942%" height="15" fill="rgb(208,77,27)"/><text x="69.5704%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="71.2621%" y="85" width="0.1942%" height="15" fill="rgb(221,76,26)"/><text x="71.5121%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="71.2621%" y="69" width="0.1942%" height="15" fill="rgb(225,139,18)"/><text x="71.5121%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.39%)</title><rect x="71.2621%" y="133" width="0.3883%" height="15" fill="rgb(230,137,11)"/><text x="71.5121%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.39%)</title><rect x="71.2621%" y="117" width="0.3883%" height="15" fill="rgb(212,28,1)"/><text x="71.5121%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.39%)</title><rect x="71.2621%" y="101" width="0.3883%" height="15" fill="rgb(248,164,17)"/><text x="71.5121%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.19%)</title><rect x="71.4563%" y="85" width="0.1942%" height="15" fill="rgb(222,171,42)"/><text x="71.7063%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.19%)</title><rect x="71.4563%" y="69" width="0.1942%" height="15" fill="rgb(243,84,45)"/><text x="71.7063%" y="79.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (10 samples, 1.94%)</title><rect x="70.8738%" y="149" width="1.9417%" height="15" fill="rgb(252,49,23)"/><text x="71.1238%" y="159.50">&lt;..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (6 samples, 1.17%)</title><rect x="71.6505%" y="133" width="1.1650%" height="15" fill="rgb(215,19,7)"/><text x="71.9005%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 1.17%)</title><rect x="71.6505%" y="117" width="1.1650%" height="15" fill="rgb(238,81,41)"/><text x="71.9005%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (6 samples, 1.17%)</title><rect x="71.6505%" y="101" width="1.1650%" height="15" fill="rgb(210,199,37)"/><text x="71.9005%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 1.17%)</title><rect x="71.6505%" y="85" width="1.1650%" height="15" fill="rgb(244,192,49)"/><text x="71.9005%" y="95.50"></text></g><g><title>__libc_write (6 samples, 1.17%)</title><rect x="71.6505%" y="69" width="1.1650%" height="15" fill="rgb(226,211,11)"/><text x="71.9005%" y="79.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="70.6796%" y="181" width="4.0777%" height="15" fill="rgb(236,162,54)"/><text x="70.9296%" y="191.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (21 samples, 4.08%)</title><rect x="70.6796%" y="165" width="4.0777%" height="15" fill="rgb(220,229,9)"/><text x="70.9296%" y="175.50">&lt;std..</text></g><g><title>std::memchr::memrchr (10 samples, 1.94%)</title><rect x="72.8155%" y="149" width="1.9417%" height="15" fill="rgb(250,87,22)"/><text x="73.0655%" y="159.50">s..</text></g><g><title>std::sys::unix::memchr::memrchr (10 samples, 1.94%)</title><rect x="72.8155%" y="133" width="1.9417%" height="15" fill="rgb(239,43,17)"/><text x="73.0655%" y="143.50">s..</text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (10 samples, 1.94%)</title><rect x="72.8155%" y="117" width="1.9417%" height="15" fill="rgb(231,177,25)"/><text x="73.0655%" y="127.50">s..</text></g><g><title>__memrchr_avx2 (10 samples, 1.94%)</title><rect x="72.8155%" y="101" width="1.9417%" height="15" fill="rgb(219,179,1)"/><text x="73.0655%" y="111.50">_..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (24 samples, 4.66%)</title><rect x="70.2913%" y="197" width="4.6602%" height="15" fill="rgb(238,219,53)"/><text x="70.5413%" y="207.50">&lt;std:..</text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.19%)</title><rect x="74.7573%" y="181" width="0.1942%" height="15" fill="rgb(232,167,36)"/><text x="75.0073%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.19%)</title><rect x="74.7573%" y="165" width="0.1942%" height="15" fill="rgb(244,19,51)"/><text x="75.0073%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.19%)</title><rect x="74.7573%" y="149" width="0.1942%" height="15" fill="rgb(224,6,22)"/><text x="75.0073%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.19%)</title><rect x="74.7573%" y="133" width="0.1942%" height="15" fill="rgb(224,145,5)"/><text x="75.0073%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.19%)</title><rect x="74.7573%" y="117" width="0.1942%" height="15" fill="rgb(234,130,49)"/><text x="75.0073%" y="127.50"></text></g><g><title>core::mem::replace (1 samples, 0.19%)</title><rect x="74.7573%" y="101" width="0.1942%" height="15" fill="rgb(254,6,2)"/><text x="75.0073%" y="111.50"></text></g><g><title>core::mem::swap (1 samples, 0.19%)</title><rect x="74.7573%" y="85" width="0.1942%" height="15" fill="rgb(208,96,46)"/><text x="75.0073%" y="95.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.19%)</title><rect x="74.7573%" y="69" width="0.1942%" height="15" fill="rgb(239,3,39)"/><text x="75.0073%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="74.7573%" y="53" width="0.1942%" height="15" fill="rgb(233,210,1)"/><text x="75.0073%" y="63.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (34 samples, 6.60%)</title><rect x="69.7087%" y="245" width="6.6019%" height="15" fill="rgb(244,137,37)"/><text x="69.9587%" y="255.50">&lt;&amp;mut W a..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (32 samples, 6.21%)</title><rect x="70.0971%" y="229" width="6.2136%" height="15" fill="rgb(240,136,2)"/><text x="70.3471%" y="239.50">&lt;std::io..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (31 samples, 6.02%)</title><rect x="70.2913%" y="213" width="6.0194%" height="15" fill="rgb(239,18,37)"/><text x="70.5413%" y="223.50">&lt;&amp;std::i..</text></g><g><title>std::io::stdio::Stdout::lock (7 samples, 1.36%)</title><rect x="74.9515%" y="197" width="1.3592%" height="15" fill="rgb(218,185,22)"/><text x="75.2015%" y="207.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (7 samples, 1.36%)</title><rect x="74.9515%" y="181" width="1.3592%" height="15" fill="rgb(225,218,4)"/><text x="75.2015%" y="191.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (7 samples, 1.36%)</title><rect x="74.9515%" y="165" width="1.3592%" height="15" fill="rgb(230,182,32)"/><text x="75.2015%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (7 samples, 1.36%)</title><rect x="74.9515%" y="149" width="1.3592%" height="15" fill="rgb(242,56,43)"/><text x="75.2015%" y="159.50"></text></g><g><title>&lt;u8 as core::fmt::num::DisplayInt&gt;::to_u64 (2 samples, 0.39%)</title><rect x="76.3107%" y="229" width="0.3883%" height="15" fill="rgb(233,99,24)"/><text x="76.5607%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.97%)</title><rect x="78.4466%" y="117" width="0.9709%" height="15" fill="rgb(234,209,42)"/><text x="78.6966%" y="127.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.78%)</title><rect x="78.6408%" y="101" width="0.7767%" height="15" fill="rgb(227,7,12)"/><text x="78.8908%" y="111.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (4 samples, 0.78%)</title><rect x="78.6408%" y="85" width="0.7767%" height="15" fill="rgb(245,203,43)"/><text x="78.8908%" y="95.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (4 samples, 0.78%)</title><rect x="78.6408%" y="69" width="0.7767%" height="15" fill="rgb(238,205,33)"/><text x="78.8908%" y="79.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 0.78%)</title><rect x="78.6408%" y="53" width="0.7767%" height="15" fill="rgb(231,56,7)"/><text x="78.8908%" y="63.50"></text></g><g><title>__libc_write (4 samples, 0.78%)</title><rect x="78.6408%" y="37" width="0.7767%" height="15" fill="rgb(244,186,29)"/><text x="78.8908%" y="47.50"></text></g><g><title>__memrchr_avx2 (8 samples, 1.55%)</title><rect x="79.4175%" y="69" width="1.5534%" height="15" fill="rgb(234,111,31)"/><text x="79.6675%" y="79.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (18 samples, 3.50%)</title><rect x="77.6699%" y="165" width="3.4951%" height="15" fill="rgb(241,149,10)"/><text x="77.9199%" y="175.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (18 samples, 3.50%)</title><rect x="77.6699%" y="149" width="3.4951%" height="15" fill="rgb(249,206,44)"/><text x="77.9199%" y="159.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (18 samples, 3.50%)</title><rect x="77.6699%" y="133" width="3.4951%" height="15" fill="rgb(251,153,30)"/><text x="77.9199%" y="143.50">&lt;st..</text></g><g><title>std::memchr::memrchr (9 samples, 1.75%)</title><rect x="79.4175%" y="117" width="1.7476%" height="15" fill="rgb(239,152,38)"/><text x="79.6675%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr (9 samples, 1.75%)</title><rect x="79.4175%" y="101" width="1.7476%" height="15" fill="rgb(249,139,47)"/><text x="79.6675%" y="111.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (9 samples, 1.75%)</title><rect x="79.4175%" y="85" width="1.7476%" height="15" fill="rgb(244,64,35)"/><text x="79.6675%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.19%)</title><rect x="80.9709%" y="69" width="0.1942%" height="15" fill="rgb(216,46,15)"/><text x="81.2209%" y="79.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.97%)</title><rect x="81.1650%" y="165" width="0.9709%" height="15" fill="rgb(250,74,19)"/><text x="81.4150%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.97%)</title><rect x="81.1650%" y="149" width="0.9709%" height="15" fill="rgb(249,42,33)"/><text x="81.4150%" y="159.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.97%)</title><rect x="81.1650%" y="133" width="0.9709%" height="15" fill="rgb(242,149,17)"/><text x="81.4150%" y="143.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (5 samples, 0.97%)</title><rect x="81.1650%" y="117" width="0.9709%" height="15" fill="rgb(244,29,21)"/><text x="81.4150%" y="127.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (5 samples, 0.97%)</title><rect x="81.1650%" y="101" width="0.9709%" height="15" fill="rgb(220,130,37)"/><text x="81.4150%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (28 samples, 5.44%)</title><rect x="77.4757%" y="213" width="5.4369%" height="15" fill="rgb(211,67,2)"/><text x="77.7257%" y="223.50">&lt;&amp;mut W..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (27 samples, 5.24%)</title><rect x="77.6699%" y="197" width="5.2427%" height="15" fill="rgb(235,68,52)"/><text x="77.9199%" y="207.50">&lt;std::..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (27 samples, 5.24%)</title><rect x="77.6699%" y="181" width="5.2427%" height="15" fill="rgb(246,142,3)"/><text x="77.9199%" y="191.50">&lt;&amp;std:..</text></g><g><title>std::io::stdio::Stdout::lock (4 samples, 0.78%)</title><rect x="82.1359%" y="165" width="0.7767%" height="15" fill="rgb(241,25,7)"/><text x="82.3859%" y="175.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (4 samples, 0.78%)</title><rect x="82.1359%" y="149" width="0.7767%" height="15" fill="rgb(242,119,39)"/><text x="82.3859%" y="159.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (4 samples, 0.78%)</title><rect x="82.1359%" y="133" width="0.7767%" height="15" fill="rgb(241,98,45)"/><text x="82.3859%" y="143.50"></text></g><g><title>__GI___pthread_mutex_lock (4 samples, 0.78%)</title><rect x="82.1359%" y="117" width="0.7767%" height="15" fill="rgb(254,28,30)"/><text x="82.3859%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral (4 samples, 0.78%)</title><rect x="82.9126%" y="213" width="0.7767%" height="15" fill="rgb(241,142,54)"/><text x="83.1626%" y="223.50"></text></g><g><title>core::fmt::Formatter::sign_plus (1 samples, 0.19%)</title><rect x="83.4951%" y="197" width="0.1942%" height="15" fill="rgb(222,85,15)"/><text x="83.7451%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (39 samples, 7.57%)</title><rect x="76.3107%" y="245" width="7.5728%" height="15" fill="rgb(210,85,47)"/><text x="76.5607%" y="255.50">core::fmt:..</text></g><g><title>core::fmt::num::imp::fmt_u64 (37 samples, 7.18%)</title><rect x="76.6990%" y="229" width="7.1845%" height="15" fill="rgb(224,206,25)"/><text x="76.9490%" y="239.50">core::fmt:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.19%)</title><rect x="83.6893%" y="213" width="0.1942%" height="15" fill="rgb(243,201,19)"/><text x="83.9393%" y="223.50"></text></g><g><title>crossterm::command::write_command_ansi (206 samples, 40.00%)</title><rect x="44.0777%" y="325" width="40.0000%" height="15" fill="rgb(236,59,4)"/><text x="44.3277%" y="335.50">crossterm::command::write_command_ansi</text></g><g><title>core::fmt::write (201 samples, 39.03%)</title><rect x="45.0485%" y="309" width="39.0291%" height="15" fill="rgb(254,179,45)"/><text x="45.2985%" y="319.50">core::fmt::write</text></g><g><title>crossterm::style::ansi::&lt;impl core::fmt::Display for crossterm::style::types::colored::Colored&gt;::fmt (89 samples, 17.28%)</title><rect x="66.7961%" y="293" width="17.2816%" height="15" fill="rgb(226,14,10)"/><text x="67.0461%" y="303.50">crossterm::style::ansi::&lt;im..</text></g><g><title>core::fmt::Formatter::write_fmt (75 samples, 14.56%)</title><rect x="69.5146%" y="277" width="14.5631%" height="15" fill="rgb(244,27,41)"/><text x="69.7646%" y="287.50">core::fmt::Formatter::..</text></g><g><title>core::fmt::write (75 samples, 14.56%)</title><rect x="69.5146%" y="261" width="14.5631%" height="15" fill="rgb(235,35,32)"/><text x="69.7646%" y="271.50">core::fmt::write</text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.19%)</title><rect x="83.8835%" y="245" width="0.1942%" height="15" fill="rgb(218,68,31)"/><text x="84.1335%" y="255.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (1 samples, 0.19%)</title><rect x="83.8835%" y="229" width="0.1942%" height="15" fill="rgb(207,120,37)"/><text x="84.1335%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.19%)</title><rect x="83.8835%" y="213" width="0.1942%" height="15" fill="rgb(227,98,0)"/><text x="84.1335%" y="223.50"></text></g><g><title>core::cmp::min (1 samples, 0.19%)</title><rect x="83.8835%" y="197" width="0.1942%" height="15" fill="rgb(207,7,3)"/><text x="84.1335%" y="207.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.19%)</title><rect x="83.8835%" y="181" width="0.1942%" height="15" fill="rgb(206,98,19)"/><text x="84.1335%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.19%)</title><rect x="83.8835%" y="165" width="0.1942%" height="15" fill="rgb(217,5,26)"/><text x="84.1335%" y="175.50"></text></g><g><title>csscolorparser::Color::from_rgb_u8 (1 samples, 0.19%)</title><rect x="84.0777%" y="325" width="0.1942%" height="15" fill="rgb(235,190,38)"/><text x="84.3277%" y="335.50"></text></g><g><title>csscolorparser::Color::rgba_u8 (5 samples, 0.97%)</title><rect x="84.2718%" y="325" width="0.9709%" height="15" fill="rgb(247,86,24)"/><text x="84.5218%" y="335.50"></text></g><g><title>roundf32x (3 samples, 0.58%)</title><rect x="84.6602%" y="309" width="0.5825%" height="15" fill="rgb(205,101,16)"/><text x="84.9102%" y="319.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.19%)</title><rect x="85.2427%" y="309" width="0.1942%" height="15" fill="rgb(246,168,33)"/><text x="85.4927%" y="319.50"></text></g><g><title>__libc_start_main (234 samples, 45.44%)</title><rect x="40.3883%" y="533" width="45.4369%" height="15" fill="rgb(231,114,1)"/><text x="40.6383%" y="543.50">__libc_start_main</text></g><g><title>main (234 samples, 45.44%)</title><rect x="40.3883%" y="517" width="45.4369%" height="15" fill="rgb(207,184,53)"/><text x="40.6383%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (234 samples, 45.44%)</title><rect x="40.3883%" y="501" width="45.4369%" height="15" fill="rgb(224,95,51)"/><text x="40.6383%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (234 samples, 45.44%)</title><rect x="40.3883%" y="485" width="45.4369%" height="15" fill="rgb(212,188,45)"/><text x="40.6383%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (234 samples, 45.44%)</title><rect x="40.3883%" y="469" width="45.4369%" height="15" fill="rgb(223,154,38)"/><text x="40.6383%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (234 samples, 45.44%)</title><rect x="40.3883%" y="453" width="45.4369%" height="15" fill="rgb(251,22,52)"/><text x="40.6383%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (234 samples, 45.44%)</title><rect x="40.3883%" y="437" width="45.4369%" height="15" fill="rgb(229,209,22)"/><text x="40.6383%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::c..</text></g><g><title>std::rt::lang_start::_{{closure}} (234 samples, 45.44%)</title><rect x="40.3883%" y="421" width="45.4369%" height="15" fill="rgb(234,138,34)"/><text x="40.6383%" y="431.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (234 samples, 45.44%)</title><rect x="40.3883%" y="405" width="45.4369%" height="15" fill="rgb(212,95,11)"/><text x="40.6383%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>crate_colorgrad::main (234 samples, 45.44%)</title><rect x="40.3883%" y="389" width="45.4369%" height="15" fill="rgb(240,179,47)"/><text x="40.6383%" y="399.50">crate_colorgrad::main</text></g><g><title>tokio::runtime::Runtime::block_on (234 samples, 45.44%)</title><rect x="40.3883%" y="373" width="45.4369%" height="15" fill="rgb(240,163,11)"/><text x="40.6383%" y="383.50">tokio::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::enter::Enter::block_on (234 samples, 45.44%)</title><rect x="40.3883%" y="357" width="45.4369%" height="15" fill="rgb(236,37,12)"/><text x="40.6383%" y="367.50">tokio::runtime::enter::Enter::block_on</text></g><g><title>crate_colorgrad::animate2::_{{closure}} (234 samples, 45.44%)</title><rect x="40.3883%" y="341" width="45.4369%" height="15" fill="rgb(232,164,16)"/><text x="40.6383%" y="351.50">crate_colorgrad::animate2::_{{closure}}</text></g><g><title>parking_lot::raw_rwlock::RawRwLock::lock_shared_slow (3 samples, 0.58%)</title><rect x="85.2427%" y="325" width="0.5825%" height="15" fill="rgb(244,205,15)"/><text x="85.4927%" y="335.50"></text></g><g><title>syscall (2 samples, 0.39%)</title><rect x="85.4369%" y="309" width="0.3883%" height="15" fill="rgb(223,117,47)"/><text x="85.6869%" y="319.50"></text></g><g><title>_start (241 samples, 46.80%)</title><rect x="39.2233%" y="549" width="46.7961%" height="15" fill="rgb(244,107,35)"/><text x="39.4733%" y="559.50">_start</text></g><g><title>_dl_start (1 samples, 0.19%)</title><rect x="85.8252%" y="533" width="0.1942%" height="15" fill="rgb(205,140,8)"/><text x="86.0752%" y="543.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.19%)</title><rect x="85.8252%" y="517" width="0.1942%" height="15" fill="rgb(228,84,46)"/><text x="86.0752%" y="527.50"></text></g><g><title>dl_main (1 samples, 0.19%)</title><rect x="85.8252%" y="501" width="0.1942%" height="15" fill="rgb(254,188,9)"/><text x="86.0752%" y="511.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.19%)</title><rect x="85.8252%" y="485" width="0.1942%" height="15" fill="rgb(206,112,54)"/><text x="86.0752%" y="495.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.19%)</title><rect x="85.8252%" y="469" width="0.1942%" height="15" fill="rgb(216,84,49)"/><text x="86.0752%" y="479.50"></text></g><g><title>openaux (1 samples, 0.19%)</title><rect x="85.8252%" y="453" width="0.1942%" height="15" fill="rgb(214,194,35)"/><text x="86.0752%" y="463.50"></text></g><g><title>_dl_map_object (1 samples, 0.19%)</title><rect x="85.8252%" y="437" width="0.1942%" height="15" fill="rgb(249,28,3)"/><text x="86.0752%" y="447.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.19%)</title><rect x="85.8252%" y="421" width="0.1942%" height="15" fill="rgb(222,56,52)"/><text x="86.0752%" y="431.50"></text></g><g><title>anon.52919ecc44d22e2a42b4787f0578e914.129.llvm.11749916003008088386 (1 samples, 0.19%)</title><rect x="86.0194%" y="549" width="0.1942%" height="15" fill="rgb(245,217,50)"/><text x="86.2694%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="86.0194%" y="533" width="0.1942%" height="15" fill="rgb(213,201,24)"/><text x="86.2694%" y="543.50"></text></g><g><title>anon.52919ecc44d22e2a42b4787f0578e914.130.llvm.11749916003008088386 (1 samples, 0.19%)</title><rect x="86.2136%" y="549" width="0.1942%" height="15" fill="rgb(248,116,28)"/><text x="86.4636%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.19%)</title><rect x="86.2136%" y="533" width="0.1942%" height="15" fill="rgb(219,72,43)"/><text x="86.4636%" y="543.50"></text></g><g><title>anon.fb4fbccdeec90379bd9bca9aaca8cf0c.71.llvm.18312390986248329121 (2 samples, 0.39%)</title><rect x="86.4078%" y="549" width="0.3883%" height="15" fill="rgb(209,138,14)"/><text x="86.6578%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.39%)</title><rect x="86.4078%" y="533" width="0.3883%" height="15" fill="rgb(222,18,33)"/><text x="86.6578%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.19%)</title><rect x="86.7961%" y="549" width="0.1942%" height="15" fill="rgb(213,199,7)"/><text x="87.0461%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.19%)</title><rect x="86.9903%" y="549" width="0.1942%" height="15" fill="rgb(250,110,10)"/><text x="87.2403%" y="559.50"></text></g><g><title>crate-colorgrad (363 samples, 70.49%)</title><rect x="17.0874%" y="565" width="70.4854%" height="15" fill="rgb(248,123,6)"/><text x="17.3374%" y="575.50">crate-colorgrad</text></g><g><title>str.3 (2 samples, 0.39%)</title><rect x="87.1845%" y="549" width="0.3883%" height="15" fill="rgb(206,91,31)"/><text x="87.4345%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.39%)</title><rect x="87.1845%" y="533" width="0.3883%" height="15" fill="rgb(211,154,13)"/><text x="87.4345%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.19%)</title><rect x="87.3786%" y="517" width="0.1942%" height="15" fill="rgb(225,148,7)"/><text x="87.6286%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.19%)</title><rect x="87.3786%" y="501" width="0.1942%" height="15" fill="rgb(220,160,43)"/><text x="87.6286%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.19%)</title><rect x="87.3786%" y="485" width="0.1942%" height="15" fill="rgb(213,52,39)"/><text x="87.6286%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.19%)</title><rect x="87.3786%" y="469" width="0.1942%" height="15" fill="rgb(243,137,7)"/><text x="87.6286%" y="479.50"></text></g><g><title>crate_colorgrad::main::{{closure}} (1 samples, 0.19%)</title><rect x="87.5728%" y="421" width="0.1942%" height="15" fill="rgb(230,79,13)"/><text x="87.8228%" y="431.50"></text></g><g><title>std::process::exit (1 samples, 0.19%)</title><rect x="87.5728%" y="405" width="0.1942%" height="15" fill="rgb(247,105,23)"/><text x="87.8228%" y="415.50"></text></g><g><title>std::sys_common::cleanup (1 samples, 0.19%)</title><rect x="87.5728%" y="389" width="0.1942%" height="15" fill="rgb(223,179,41)"/><text x="87.8228%" y="399.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.19%)</title><rect x="87.5728%" y="373" width="0.1942%" height="15" fill="rgb(218,9,34)"/><text x="87.8228%" y="383.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.19%)</title><rect x="87.5728%" y="357" width="0.1942%" height="15" fill="rgb(222,106,8)"/><text x="87.8228%" y="367.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.19%)</title><rect x="87.5728%" y="341" width="0.1942%" height="15" fill="rgb(211,220,0)"/><text x="87.8228%" y="351.50"></text></g><g><title>std::sys_common::cleanup::{{closure}} (1 samples, 0.19%)</title><rect x="87.5728%" y="325" width="0.1942%" height="15" fill="rgb(229,52,16)"/><text x="87.8228%" y="335.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::cleanup (1 samples, 0.19%)</title><rect x="87.5728%" y="309" width="0.1942%" height="15" fill="rgb(212,155,18)"/><text x="87.8228%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.19%)</title><rect x="87.5728%" y="293" width="0.1942%" height="15" fill="rgb(242,21,14)"/><text x="87.8228%" y="303.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.19%)</title><rect x="87.5728%" y="277" width="0.1942%" height="15" fill="rgb(222,19,48)"/><text x="87.8228%" y="287.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.19%)</title><rect x="87.5728%" y="261" width="0.1942%" height="15" fill="rgb(232,45,27)"/><text x="87.8228%" y="271.50"></text></g><g><title>__GI_munmap (1 samples, 0.19%)</title><rect x="87.5728%" y="245" width="0.1942%" height="15" fill="rgb(249,103,42)"/><text x="87.8228%" y="255.50"></text></g><g><title>ctrl-c (7 samples, 1.36%)</title><rect x="87.5728%" y="565" width="1.3592%" height="15" fill="rgb(246,81,33)"/><text x="87.8228%" y="575.50"></text></g><g><title>__GI___clone (7 samples, 1.36%)</title><rect x="87.5728%" y="549" width="1.3592%" height="15" fill="rgb(252,33,42)"/><text x="87.8228%" y="559.50"></text></g><g><title>start_thread (7 samples, 1.36%)</title><rect x="87.5728%" y="533" width="1.3592%" height="15" fill="rgb(209,212,41)"/><text x="87.8228%" y="543.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (7 samples, 1.36%)</title><rect x="87.5728%" y="517" width="1.3592%" height="15" fill="rgb(207,154,6)"/><text x="87.8228%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 1.36%)</title><rect x="87.5728%" y="501" width="1.3592%" height="15" fill="rgb(223,64,47)"/><text x="87.8228%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (7 samples, 1.36%)</title><rect x="87.5728%" y="485" width="1.3592%" height="15" fill="rgb(211,161,38)"/><text x="87.8228%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (7 samples, 1.36%)</title><rect x="87.5728%" y="469" width="1.3592%" height="15" fill="rgb(219,138,40)"/><text x="87.8228%" y="479.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 1.36%)</title><rect x="87.5728%" y="453" width="1.3592%" height="15" fill="rgb(241,228,46)"/><text x="87.8228%" y="463.50"></text></g><g><title>ctrlc::set_handler::{{closure}} (7 samples, 1.36%)</title><rect x="87.5728%" y="437" width="1.3592%" height="15" fill="rgb(223,209,38)"/><text x="87.8228%" y="447.50"></text></g><g><title>ctrlc::platform::unix::block_ctrl_c (6 samples, 1.17%)</title><rect x="87.7670%" y="421" width="1.1650%" height="15" fill="rgb(236,164,45)"/><text x="88.0170%" y="431.50"></text></g><g><title>nix::unistd::read (6 samples, 1.17%)</title><rect x="87.7670%" y="405" width="1.1650%" height="15" fill="rgb(231,15,5)"/><text x="88.0170%" y="415.50"></text></g><g><title>__libc_read (6 samples, 1.17%)</title><rect x="87.7670%" y="389" width="1.1650%" height="15" fill="rgb(252,35,15)"/><text x="88.0170%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="88.9320%" y="549" width="0.1942%" height="15" fill="rgb(248,181,18)"/><text x="89.1820%" y="559.50"></text></g><g><title>pa_memblockq_push_align (1 samples, 0.19%)</title><rect x="88.9320%" y="533" width="0.1942%" height="15" fill="rgb(233,39,42)"/><text x="89.1820%" y="543.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="89.1262%" y="437" width="0.1942%" height="15" fill="rgb(238,110,33)"/><text x="89.3762%" y="447.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="89.1262%" y="421" width="0.1942%" height="15" fill="rgb(233,195,10)"/><text x="89.3762%" y="431.50"></text></g><g><title>pa_stream_update_timing_info (1 samples, 0.19%)</title><rect x="89.1262%" y="405" width="0.1942%" height="15" fill="rgb(254,105,3)"/><text x="89.3762%" y="415.50"></text></g><g><title>[libpulsecommon-14.0.so] (1 samples, 0.19%)</title><rect x="89.1262%" y="389" width="0.1942%" height="15" fill="rgb(221,225,9)"/><text x="89.3762%" y="399.50"></text></g><g><title>pa_pstream_send_packet (1 samples, 0.19%)</title><rect x="89.1262%" y="373" width="0.1942%" height="15" fill="rgb(224,227,45)"/><text x="89.3762%" y="383.50"></text></g><g><title>pa_queue_push (1 samples, 0.19%)</title><rect x="89.1262%" y="357" width="0.1942%" height="15" fill="rgb(229,198,43)"/><text x="89.3762%" y="367.50"></text></g><g><title>pa_flist_pop (1 samples, 0.19%)</title><rect x="89.1262%" y="341" width="0.1942%" height="15" fill="rgb(206,209,35)"/><text x="89.3762%" y="351.50"></text></g><g><title>[libpulsecommon-14.0.so] (1 samples, 0.19%)</title><rect x="89.1262%" y="325" width="0.1942%" height="15" fill="rgb(245,195,53)"/><text x="89.3762%" y="335.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (1 samples, 0.19%)</title><rect x="89.7087%" y="341" width="0.1942%" height="15" fill="rgb(240,92,26)"/><text x="89.9587%" y="351.50"></text></g><g><title>pa_stream_readable_size (1 samples, 0.19%)</title><rect x="89.7087%" y="325" width="0.1942%" height="15" fill="rgb(207,40,23)"/><text x="89.9587%" y="335.50"></text></g><g><title>pa_detect_fork (1 samples, 0.19%)</title><rect x="89.7087%" y="309" width="0.1942%" height="15" fill="rgb(223,111,35)"/><text x="89.9587%" y="319.50"></text></g><g><title>__GI___getpid (1 samples, 0.19%)</title><rect x="89.7087%" y="293" width="0.1942%" height="15" fill="rgb(229,147,28)"/><text x="89.9587%" y="303.50"></text></g><g><title>[libasound_module_pcm_pulse.so] (3 samples, 0.58%)</title><rect x="89.7087%" y="357" width="0.5825%" height="15" fill="rgb(211,29,28)"/><text x="89.9587%" y="367.50"></text></g><g><title>__libc_write (2 samples, 0.39%)</title><rect x="89.9029%" y="341" width="0.3883%" height="15" fill="rgb(228,72,33)"/><text x="90.1529%" y="351.50"></text></g><g><title>pa_hashmap_get (2 samples, 0.39%)</title><rect x="90.2913%" y="357" width="0.3883%" height="15" fill="rgb(205,214,31)"/><text x="90.5413%" y="367.50"></text></g><g><title>[libpulsecommon-14.0.so] (2 samples, 0.39%)</title><rect x="90.2913%" y="341" width="0.3883%" height="15" fill="rgb(224,111,15)"/><text x="90.5413%" y="351.50"></text></g><g><title>pa_memblockq_push_align (2 samples, 0.39%)</title><rect x="90.6796%" y="357" width="0.3883%" height="15" fill="rgb(253,21,26)"/><text x="90.9296%" y="367.50"></text></g><g><title>pa_memblockq_push (2 samples, 0.39%)</title><rect x="90.6796%" y="341" width="0.3883%" height="15" fill="rgb(245,139,43)"/><text x="90.9296%" y="351.50"></text></g><g><title>pa_flist_pop (1 samples, 0.19%)</title><rect x="90.8738%" y="325" width="0.1942%" height="15" fill="rgb(252,170,7)"/><text x="91.1238%" y="335.50"></text></g><g><title>[libpulsecommon-14.0.so] (1 samples, 0.19%)</title><rect x="90.8738%" y="309" width="0.1942%" height="15" fill="rgb(231,118,14)"/><text x="91.1238%" y="319.50"></text></g><g><title>[libpulse.so.0.23.0] (1 samples, 0.19%)</title><rect x="91.0680%" y="309" width="0.1942%" height="15" fill="rgb(238,83,0)"/><text x="91.3180%" y="319.50"></text></g><g><title>[libpulse.so.0.23.0] (9 samples, 1.75%)</title><rect x="89.7087%" y="373" width="1.7476%" height="15" fill="rgb(221,39,39)"/><text x="89.9587%" y="383.50"></text></g><g><title>pa_pdispatch_run (2 samples, 0.39%)</title><rect x="91.0680%" y="357" width="0.3883%" height="15" fill="rgb(222,119,46)"/><text x="91.3180%" y="367.50"></text></g><g><title>[libpulsecommon-14.0.so] (2 samples, 0.39%)</title><rect x="91.0680%" y="341" width="0.3883%" height="15" fill="rgb(222,165,49)"/><text x="91.3180%" y="351.50"></text></g><g><title>[libpulse.so.0.23.0] (2 samples, 0.39%)</title><rect x="91.0680%" y="325" width="0.3883%" height="15" fill="rgb(219,113,52)"/><text x="91.3180%" y="335.50"></text></g><g><title>pa_format_info_new (1 samples, 0.19%)</title><rect x="91.2621%" y="309" width="0.1942%" height="15" fill="rgb(214,7,15)"/><text x="91.5121%" y="319.50"></text></g><g><title>pa_xmalloc (1 samples, 0.19%)</title><rect x="91.2621%" y="293" width="0.1942%" height="15" fill="rgb(235,32,4)"/><text x="91.5121%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.19%)</title><rect x="91.2621%" y="277" width="0.1942%" height="15" fill="rgb(238,90,54)"/><text x="91.5121%" y="287.50"></text></g><g><title>pa_context_unref (1 samples, 0.19%)</title><rect x="91.4563%" y="373" width="0.1942%" height="15" fill="rgb(213,208,19)"/><text x="91.7063%" y="383.50"></text></g><g><title>[libpulsecommon-14.0.so] (15 samples, 2.91%)</title><rect x="89.3204%" y="421" width="2.9126%" height="15" fill="rgb(233,156,4)"/><text x="89.5704%" y="431.50">[l..</text></g><g><title>[libpulsecommon-14.0.so] (14 samples, 2.72%)</title><rect x="89.5146%" y="405" width="2.7184%" height="15" fill="rgb(207,194,5)"/><text x="89.7646%" y="415.50">[l..</text></g><g><title>[libpulsecommon-14.0.so] (14 samples, 2.72%)</title><rect x="89.5146%" y="389" width="2.7184%" height="15" fill="rgb(206,111,30)"/><text x="89.7646%" y="399.50">[l..</text></g><g><title>pa_memimport_get (3 samples, 0.58%)</title><rect x="91.6505%" y="373" width="0.5825%" height="15" fill="rgb(243,70,54)"/><text x="91.9005%" y="383.50"></text></g><g><title>pa_hashmap_get (2 samples, 0.39%)</title><rect x="91.8447%" y="357" width="0.3883%" height="15" fill="rgb(242,28,8)"/><text x="92.0947%" y="367.50"></text></g><g><title>[libpulsecommon-14.0.so] (2 samples, 0.39%)</title><rect x="91.8447%" y="341" width="0.3883%" height="15" fill="rgb(219,106,18)"/><text x="92.0947%" y="351.50"></text></g><g><title>pa_mainloop_dispatch (20 samples, 3.88%)</title><rect x="89.1262%" y="453" width="3.8835%" height="15" fill="rgb(244,222,10)"/><text x="89.3762%" y="463.50">pa_m..</text></g><g><title>[libpulsecommon-14.0.so] (19 samples, 3.69%)</title><rect x="89.3204%" y="437" width="3.6893%" height="15" fill="rgb(236,179,52)"/><text x="89.5704%" y="447.50">[lib..</text></g><g><title>pa_fdsem_after_poll (4 samples, 0.78%)</title><rect x="92.2330%" y="421" width="0.7767%" height="15" fill="rgb(213,23,39)"/><text x="92.4830%" y="431.50"></text></g><g><title>[libpulsecommon-14.0.so] (4 samples, 0.78%)</title><rect x="92.2330%" y="405" width="0.7767%" height="15" fill="rgb(238,48,10)"/><text x="92.4830%" y="415.50"></text></g><g><title>pa_read (4 samples, 0.78%)</title><rect x="92.2330%" y="389" width="0.7767%" height="15" fill="rgb(251,196,23)"/><text x="92.4830%" y="399.50"></text></g><g><title>__libc_read (3 samples, 0.58%)</title><rect x="92.4272%" y="373" width="0.5825%" height="15" fill="rgb(250,152,24)"/><text x="92.6772%" y="383.50"></text></g><g><title>__GI___poll (30 samples, 5.83%)</title><rect x="93.0097%" y="421" width="5.8252%" height="15" fill="rgb(209,150,17)"/><text x="93.2597%" y="431.50">__GI___..</text></g><g><title>pa_mainloop_poll (32 samples, 6.21%)</title><rect x="93.0097%" y="453" width="6.2136%" height="15" fill="rgb(234,202,34)"/><text x="93.2597%" y="463.50">pa_mainl..</text></g><g><title>[libpulse.so.0.23.0] (32 samples, 6.21%)</title><rect x="93.0097%" y="437" width="6.2136%" height="15" fill="rgb(253,148,53)"/><text x="93.2597%" y="447.50">[libpuls..</text></g><g><title>pa_mutex_lock (2 samples, 0.39%)</title><rect x="98.8350%" y="421" width="0.3883%" height="15" fill="rgb(218,129,16)"/><text x="99.0850%" y="431.50"></text></g><g><title>__pthread_mutex_lock_full (2 samples, 0.39%)</title><rect x="98.8350%" y="405" width="0.3883%" height="15" fill="rgb(216,85,19)"/><text x="99.0850%" y="415.50"></text></g><g><title>pa_mainloop_run (53 samples, 10.29%)</title><rect x="89.1262%" y="485" width="10.2913%" height="15" fill="rgb(235,228,7)"/><text x="89.3762%" y="495.50">pa_mainloop_run</text></g><g><title>pa_mainloop_iterate (53 samples, 10.29%)</title><rect x="89.1262%" y="469" width="10.2913%" height="15" fill="rgb(245,175,0)"/><text x="89.3762%" y="479.50">pa_mainloop_ite..</text></g><g><title>pa_mainloop_prepare (1 samples, 0.19%)</title><rect x="99.2233%" y="453" width="0.1942%" height="15" fill="rgb(208,168,36)"/><text x="99.4733%" y="463.50"></text></g><g><title>pa_read (1 samples, 0.19%)</title><rect x="99.2233%" y="437" width="0.1942%" height="15" fill="rgb(246,171,24)"/><text x="99.4733%" y="447.50"></text></g><g><title>__libc_read (1 samples, 0.19%)</title><rect x="99.2233%" y="421" width="0.1942%" height="15" fill="rgb(215,142,24)"/><text x="99.4733%" y="431.50"></text></g><g><title>threaded-ml (55 samples, 10.68%)</title><rect x="88.9320%" y="565" width="10.6796%" height="15" fill="rgb(250,187,7)"/><text x="89.1820%" y="575.50">threaded-ml</text></g><g><title>__GI___clone (54 samples, 10.49%)</title><rect x="89.1262%" y="549" width="10.4854%" height="15" fill="rgb(228,66,33)"/><text x="89.3762%" y="559.50">__GI___clone</text></g><g><title>start_thread (54 samples, 10.49%)</title><rect x="89.1262%" y="533" width="10.4854%" height="15" fill="rgb(234,215,21)"/><text x="89.3762%" y="543.50">start_thread</text></g><g><title>[libpulsecommon-14.0.so] (54 samples, 10.49%)</title><rect x="89.1262%" y="517" width="10.4854%" height="15" fill="rgb(222,191,20)"/><text x="89.3762%" y="527.50">[libpulsecommon..</text></g><g><title>[libpulse.so.0.23.0] (54 samples, 10.49%)</title><rect x="89.1262%" y="501" width="10.4854%" height="15" fill="rgb(245,79,54)"/><text x="89.3762%" y="511.50">[libpulse.so.0...</text></g><g><title>pa_mutex_lock (1 samples, 0.19%)</title><rect x="99.4175%" y="485" width="0.1942%" height="15" fill="rgb(240,10,37)"/><text x="99.6675%" y="495.50"></text></g><g><title>__pthread_mutex_lock_full (1 samples, 0.19%)</title><rect x="99.4175%" y="469" width="0.1942%" height="15" fill="rgb(214,192,32)"/><text x="99.6675%" y="479.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.19%)</title><rect x="99.6117%" y="453" width="0.1942%" height="15" fill="rgb(209,36,54)"/><text x="99.8617%" y="463.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.19%)</title><rect x="99.6117%" y="437" width="0.1942%" height="15" fill="rgb(220,10,11)"/><text x="99.8617%" y="447.50"></text></g><g><title>__pthread_getaffinity_np (1 samples, 0.19%)</title><rect x="99.6117%" y="421" width="0.1942%" height="15" fill="rgb(221,106,17)"/><text x="99.8617%" y="431.50"></text></g><g><title>all (515 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(251,142,44)"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (2 samples, 0.39%)</title><rect x="99.6117%" y="565" width="0.3883%" height="15" fill="rgb(238,13,15)"/><text x="99.8617%" y="575.50"></text></g><g><title>__GI___clone (2 samples, 0.39%)</title><rect x="99.6117%" y="549" width="0.3883%" height="15" fill="rgb(208,107,27)"/><text x="99.8617%" y="559.50"></text></g><g><title>start_thread (2 samples, 0.39%)</title><rect x="99.6117%" y="533" width="0.3883%" height="15" fill="rgb(205,136,37)"/><text x="99.8617%" y="543.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.39%)</title><rect x="99.6117%" y="517" width="0.3883%" height="15" fill="rgb(250,205,27)"/><text x="99.8617%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.39%)</title><rect x="99.6117%" y="501" width="0.3883%" height="15" fill="rgb(210,80,43)"/><text x="99.8617%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 0.39%)</title><rect x="99.6117%" y="485" width="0.3883%" height="15" fill="rgb(247,160,36)"/><text x="99.8617%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (2 samples, 0.39%)</title><rect x="99.6117%" y="469" width="0.3883%" height="15" fill="rgb(234,13,49)"/><text x="99.8617%" y="479.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.19%)</title><rect x="99.8058%" y="453" width="0.1942%" height="15" fill="rgb(234,122,0)"/><text x="100.0558%" y="463.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1 samples, 0.19%)</title><rect x="99.8058%" y="437" width="0.1942%" height="15" fill="rgb(207,146,38)"/><text x="100.0558%" y="447.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (1 samples, 0.19%)</title><rect x="99.8058%" y="421" width="0.1942%" height="15" fill="rgb(207,177,25)"/><text x="100.0558%" y="431.50"></text></g><g><title>__GI___sched_yield (1 samples, 0.19%)</title><rect x="99.8058%" y="405" width="0.1942%" height="15" fill="rgb(211,178,42)"/><text x="100.0558%" y="415.50"></text></g></svg></svg>