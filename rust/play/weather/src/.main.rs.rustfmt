use std::collections::HashMap;

use chrono::{Date, DateTime, Datelike, Local, TimeZone, Timelike, Utc};
use colorgrad::{Color, CustomGradient};
use crossterm::style::{self, Stylize};
use structopt::StructOpt;
use sunrise::sunrise_sunset;

use wthr::{
    client::ApiClient,
    config::{Base, Config},
    error::Result,
    APP, NWS_API,
};

const USR: &str = "zach@allotropic.com";
const LAT: f64 = 42.440932990492946;
const LON: f64 = -76.52462385924595;

#[derive(Debug, Default, StructOpt)]
pub struct Opt {
    /// Hourly forecast
    #[structopt(short)]
    hourly: bool,
    /// Latitude
    #[structopt(env, long = "lat")]
    latitude: Option<f64>,
    /// Longitude
    #[structopt(env, long = "lon")]
    longitude: Option<f64>,
    /// Api key
    #[structopt(env, short = "k")]
    api_key: Option<String>,
    /// Profile
    location: Option<String>,
}

#[tokio::main(flavor = "current_thread")]
async fn main() -> Result<()> {
    let config = Config::load(Base::FromEnv).unwrap_or_default();
    println!("{:?}", config);
    let opt = Opt::from_args();

    /*
    let (lat, lon) = if let Some(l) = opt.location {
        if let Some(l) = config.locations.get(&l) {
            (l.latitude, l.longitude)
        } else {
            panic!()
        }
    } else if opt.latitude.is_some() && opt.longitude.is_some() {
        (opt.latitude.unwrap(), opt.longitude.unwrap())
    } else if let Some(l) = config.location {
        (l.latitude, l.longitude)
    } else {
        panic!()
    };
    */

    let lat = LAT;
    let lon = LON;

    let mut client = ApiClient::builder()
        .base_url(NWS_API)
        .api_key(APP, USR)
        .build()?;

    // Find the weather station gridpoint for the location
    let point = client.get_point(vec![lat, lon]).await?;

    let forecast = client
        .get_forecast_from_url(if opt.hourly {
            point.properties.forecast_hourly
        } else {
            point.properties.forecast
        })
        .await?;

    let max_wind_column_len = forecast
        .properties
        .periods
        .iter()
        .map(|x| x.wind_speed.len())
        .max()
        .unwrap_or(0);

    let max_time_column_len = forecast
        .properties
        .periods
        .iter()
        .map(|x| {
            DateTime::<Utc>::from_utc(x.start_time.naive_utc(), Utc)
                .format("%A %l%P")
                .to_string()
                .len()
        })
        .max()
        .unwrap_or(0);

    let temp_grad = CustomGradient::new()
        .colors(&[
            Color::from_rgb_u8(255, 255, 255),
            Color::from_rgb_u8(66, 66, 255),
            Color::from_rgb_u8(66, 255, 66),
            Color::from_rgb_u8(255, 130, 66),
        ])
        .domain(&[0., 32., 72., 84.])
        .build()?;

    // Store sunrise/sunset times for each new date
    let mut sun_times: HashMap<Date<Utc>, (DateTime<Utc>, DateTime<Utc>)> = HashMap::new();

    for period in forecast.properties.periods {
        let time = DateTime::from_utc(period.start_time.naive_utc(), Utc);
        let date = time.date();

        /*
        let (sunrise, sunset) = match sun_times.get(&date) {
            Some(s) => *s,
            None => {
                let (rise, set) = sunrise_sunset(LAT, LON, date.year(), date.month(), date.day());
                let rise = Utc.timestamp(rise, 0);
                let set = Utc.timestamp(set, 0);
                sun_times.insert(date, (rise, set));
                (rise, set)
            }
        };
        */
        let (sunrise, sunset) = sun_times.entry(date).or_insert({
            let (rise, set) = sunrise_sunset(lat, lon, date.year(), date.month(), date.day());
            (Utc.timestamp(rise, 0), Utc.timestamp(set, 0))
        });

        // Format time for display
        let time_color = if (time > *sunrise && time < *sunset)
            || time.hour() == sunrise.hour()
            || time.hour() == sunset.hour()
        {
            // Daytime
            style::Color::Rgb {
                r: 255,
                g: 255,
                b: 0,
            }
        } else {
            // Nighttime
            style::Color::Rgb {
                r: 100,
                g: 0,
                b: 255,
            }
        };
        let local_time = Local.from_utc_datetime(&time.naive_utc());
        let time = format!(
            "{0: >1$}",
            local_time.format("%A %l%P").to_string(),
            max_time_column_len
        );

        // Format temperature for display
        let (r, g, b, _a) = temp_grad.at(period.temperature as f64).rgba_u8();
        let temp_color = style::Color::Rgb { r, g, b };
        let temp = format!("{}Â°{}", period.temperature, period.temperature_unit);

        println!(
            "{0} {1} {2: >3$} {4: <2} {5}",
            time.with(time_color),
            temp.with(temp_color),
            period.wind_speed,
            max_wind_column_len,
            period.wind_direction,
            period.short_forecast
        );
    }

    Ok(())
}
